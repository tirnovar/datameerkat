<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Data Meerkat</title>
        <description>Blog not just about Power BI</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Wed, 08 Feb 2023 08:46:58 +0100</pubDate>
        <lastBuildDate>Wed, 08 Feb 2023 08:46:58 +0100</lastBuildDate>
        <generator>Jekyll v3.9.2</generator>
        
            <item>
                <title></title>
                <description>&lt;p&gt;Of course, just like datasets during scheduled refresh, they send information that something went wrong and the update did not occur. But we only have a few places in the Power BI Service that would show us all dataflow updates at once or allow us to get them selectively. So we have to browse the workspaces where these dataflows are located and get this information ourselves.&lt;/p&gt;

&lt;p&gt;For that reason, I’d like to share with you some options that might help you along the way.&lt;/p&gt;

&lt;h2 id=&quot;monitoring-of-critical-dataflows&quot;&gt;Monitoring of critical dataflows&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;We can agree that often not all dataflows are critical.&lt;/strong&gt; But for those that are, we need to follow them in great detail and have a good overview. It is good to be able to monitor such dataflows almost &lt;strong&gt;on a near real-time basis&lt;/strong&gt; so that we can &lt;strong&gt;act quickly&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Since there are usually not hundreds of such dataflows but rather units or smaller tens, the possibility of using the integration between Power Automate and Power BI Push Datasets is offered.&lt;/p&gt;

&lt;p&gt;If I were to outline how it works: “After the Dataflow update, a Power Automate flow could be started, which evaluates the update and writes it to the Power BI Push dataset. At the same time, based on the result of the update, it may notify the dataflow manager to resolve the situation immediately”. This scenario is straightforward today within &lt;strong&gt;Power Automate&lt;/strong&gt; and &lt;strong&gt;Power BI integration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/diagram.png&quot; alt=&quot;Diagram&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Diagram&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;sample-for-extracting-refresh-data-from-dataflow&quot;&gt;Sample for extracting refresh data from Dataflow&lt;/h3&gt;

&lt;p&gt;To demonstrate, I’m using a Dataflow called Orders, and I consider it critical, and I need to be sure that the update has gone through, or I need to know about it immediately.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/ordersDataflow.png&quot; alt=&quot;Prepared Dataflow - Orders&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Prepared Dataflow - Orders&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By itself, this Dataflows runs beautifully. It can be updated, and updates are scheduled. But how can Power Automate help me now?&lt;/p&gt;

&lt;p&gt;Within the trigger options for Power Automate, there is the option of using the so-called &lt;strong&gt;“automated” trigger&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/automatedCloudTrigger.png&quot; alt=&quot;Automated Trigger of Power Automate&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Automated Trigger of Power Automate&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And among its options is one option called &lt;strong&gt;“When a dataflow refresh completes.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/triggerByDataflow.png&quot; alt=&quot;rigger for Power Automate&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Trigger for Power Automate&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This trigger can work with both &lt;strong&gt;user access&lt;/strong&gt; and &lt;strong&gt;Service Principal&lt;/strong&gt;. This can be seen in the following images:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/userSign.png&quot; alt=&quot;User Access&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;User Access&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/spSign.png&quot; alt=&quot;Service Principal Access&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Service Principal Access&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Both options will work approximately similarly. You always need access/permissions to the given workspace where the Dataflow is stored / directly on dataflows. After logging in, you can choose the work type of the workspace &lt;strong&gt;(Workspace = Power BI, Environment = Power Apps)&lt;/strong&gt;, then the specific variant where you have Dataflow, and, of course, the Dataflow itself.&lt;/p&gt;

&lt;p&gt;This trigger then returns the following values ​​from the update:
&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/actions.png&quot; alt=&quot;Dataflow attributes&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Dataflow attributes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you don’t work with Power Automate often, you may be surprised by the return value called &lt;strong&gt;“body.”&lt;/strong&gt; It is a value that contains the total received messages from API communication. &lt;strong&gt;So it’s JSON with other attributes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The important thing is that we already know what attributes we will get after our Dataflow is updated. Because thanks to this, we can prepare a Power BI Push or Streamed dataset to which we will pass this information!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/streamingDataset.png&quot; alt=&quot;Streaming Dataset&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Streaming Dataset&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When creating a streaming dataset, we are immediately asked what attributes we want to have in this dataset. Whether via &lt;strong&gt;API&lt;/strong&gt; or using &lt;strong&gt;Azure Stream&lt;/strong&gt;, or using &lt;strong&gt;PUBNUB&lt;/strong&gt;. The option of using the API is entirely sufficient for us now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/typeOfStream.png&quot; alt=&quot;Type of streams&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Type of streams&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the next step, you define the “columns” you want to have in the Push Dataset. At the moment, I’ll put all the ones that Power Automate gets us + an extra one that will calculate the duration of the update. In the same way, we could also add other columns that Power Automate could calculate or provide for us.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/creationOfStreamingDataset.png&quot; alt=&quot;Creation of Streaming Dataset&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Creation of Streaming Dataset&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To do this, Power BI will generate a simple JSON sample of what content it expects to receive. Then, you can turn on historical analysis, and I recommend that you do so, so that the data is stored for us for a more extended period or a more considerable amount of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/generatedJSON.png&quot; alt=&quot;Generated JSON&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Generated JSON&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After your confirmation, an API link will be created to which you can start sending your data. But we don’t need this link! Because Power Automate can capture and use this dataset itself. Specifically through &lt;strong&gt;“Add rows to a dataset.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/pushURL.png&quot; alt=&quot;PUSH URL&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;PUSH URL&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/pbiAction.png&quot; alt=&quot;Power BI Actions&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Power BI Actions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once we’ve filled in the basic information about the location of our dataset, Power Automate will pull in the metadata, and we can populate it with our retrieved values. Except for the last attribute, &lt;strong&gt;because we still have to calculate it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/insertedAttributes.png&quot; alt=&quot;Inserted basic Attributes&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Inserted basic Attributes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To calculate the elapsed time, we can use the procedure mentioned by &lt;a href=&quot;https://www.linkedin.com/in/tom-riha/&quot;&gt;Tomáš Říha&lt;/a&gt; in his article: &lt;a href=&quot;https://tomriha.com/how-to-calculate-difference-between-two-times-in-power-automate/&quot;&gt;How to calculate the difference between two times in Power Automate&lt;/a&gt;. Specifically, it involves using a DateTime converter, which converts this format into “ticks,” which we subtract from each other and then divide by the required time quantity, as in this case for seconds &lt;em&gt;(that’s why we divide by the number 10000000)&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;div(sub(ticks(triggerOutputs()?[&apos;body/endTime&apos;]),ticks(triggerOutputs()?[&apos;body/startTime&apos;])),10000000)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/insertedFunction.png&quot; alt=&quot;Inserted function&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Inserted function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can test the Flow by saving it and letting the Dataflow update. Then, if everything was successful, we could find the Flow we had just created in detail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/testOfFlow.png&quot; alt=&quot;Test of created Flow&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Test of created Flow&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From this dataset, which stores data thanks to the historicization settings, we can start preparing a report that will provide us with the initially mentioned detail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/dataInDataset.png&quot; alt=&quot;Data in Dataset&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Data in Dataset&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I want to add a small example of how such a report can look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/ourImage.png&quot; alt=&quot;Showcase&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Showcase&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can of course connect to this dataset from Power BI Desktop and add your measures.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;adding-a-notification&quot;&gt;Adding a notification&lt;/h3&gt;
&lt;p&gt;Anyway, that still needs to be more! We are now receiving information about the dataflow update, and since we created the same Flow for other dataflows, our dataset is filled with data, and we have everything in one place. That’s great, but one piece of the puzzle needs to be included. Error notifications!&lt;/p&gt;

&lt;p&gt;Here we leave the Power BI plane entirely because this is primarily a domain for Power Automate. There are many options for notifications. From a notification from the Power Automate application (if the user has it installed, to an e-mail message &lt;em&gt;(but let’s face it, who reads these notifications…)&lt;/em&gt;, to direct notifications to MS Teams. &lt;strong&gt;I spend a lot of time in MS Teams, so I prefer the notification here&lt;/strong&gt;, so I will show you some options that can be used here.&lt;/p&gt;

&lt;p&gt;So we need to extend our Flow with &lt;strong&gt;decision-making&lt;/strong&gt; that tells when someone should be notified. What’s remarkable here is that the help within the return values ​​tells us the states that can be returned to us so that we can use them!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/refreshStatuses.png&quot; alt=&quot;Refresh Statuses&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Refresh Statuses&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Based on this, we can prepare a condition. At this moment, I will prepare it so that every time the Flow does not complete successfully, I will send a notification, so a simple condition is enough for me:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/condition.png&quot; alt=&quot;Condition in Power Automate&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Condition in Power Automate&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Within teams, we have more options for the message we want: a simple HTML message or an Adaptive card with, for example, a prompt and an action button. I prefer the second variant with an adaptive card because it requires more code, and the result is more fun.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/postOptionsForTeams.png&quot; alt=&quot;Post options of MS Teams Action&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Post options of MS Teams Action&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When creating an adaptive card, I recommend using its builder on the &lt;a href=&quot;https://adaptivecards.io/designer/&quot;&gt;official website&lt;/a&gt;. Here you can prepare the card and transfer its code to Power Automate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The card doesn’t have to be complicated.&lt;/strong&gt; It is mainly about communicating the problem that has arisen and transferring &lt;strong&gt;a possible click-through to the Power BI Service Dataflow Settings&lt;/strong&gt;, where the user can respond. So even if we can add pictures, emojis, etc., to the card… this simple design will suffice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/previewOfAdaptiveCard.png&quot; alt=&quot;Preview of Adaptive Card&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Preview of Adaptive Card&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Prepared JSON to transfer to Power Automate:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AdaptiveCard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TextBlock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Medium&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;weight&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bolder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${title}&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FactSet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;facts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Refresh type:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${refresh}&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Started at:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\{\{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,SHORT&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\)\}\}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; at &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\{\{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\}\)\}\}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ColumnSet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;columns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stretch&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stretch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ActionSet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;actions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action.OpenUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Detail of Dataflow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${link}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;destructive&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$schema&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://adaptivecards.io/schemas/adaptive-card.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.4&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, &lt;strong&gt;MS Teams cannot support everything that Adaptive cards can do&lt;/strong&gt;. At the same time, they have their requirements for formats and the like, so it is often better to define some transformations directly in Power Automate and pass only the results. For example, with that &lt;strong&gt;DateTime&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At the same time, you need to add a link to where the button will lead. For example, I direct it to the Settings of the given Dataflow.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AdaptiveCard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TextBlock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Medium&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;weight&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bolder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@{concat(concat(concat(triggerOutputs()?[&apos;body/status&apos;],&apos;ed fresh of &apos;),triggerOutputs()?[&apos;body/dataflowName&apos;]),&apos; dataflow&apos;)}&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FactSet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;facts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Refresh type:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@{triggerOutputs()?[&apos;body/refreshType&apos;]}&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Started at:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@{formatDateTime(triggerOutputs()?[&apos;body/startTime&apos;],&apos;ddd, MM yyyy hh:mm:ss&apos;)}&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ColumnSet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;columns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stretch&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stretch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ActionSet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;actions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action.OpenUrl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Detail of Dataflow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://app.powerbi.com/groups/YOUR-WORKSPACE-ID/settings/dataflows/YOUR-DATAFLOW-ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;destructive&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$schema&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://adaptivecards.io/schemas/adaptive-card.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.4&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So if our Dataflow fails now:
&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/dataflowRefreshError.png&quot; alt=&quot;Refresh Error&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Refresh Error&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So Power Automate starts and sends us this notification:
&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/sentNotification.png&quot; alt=&quot;Sent notification&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Sent notification&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And the button from it redirects us to the settings, where we can also find out the details of the updates. Well, isn’t that great? This way, you can save time by searching if something has fallen, where it is, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dataflows Refresh Monitoring/completeFlow.png&quot; alt=&quot;Showcase of complete Flow&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Showcase of complete Flow&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;general-monitoring-via-power-bi-rest-api&quot;&gt;General monitoring via Power BI REST API&lt;/h2&gt;

&lt;p&gt;In addition to critical dataflows, we may also want to monitor other dataflows, where a certain degree of delay will suffice, and we will only need to see some things after a certain point.&lt;/p&gt;

&lt;p&gt;At the same time, it’s an opportunity to look at another option to get these updates!&lt;/p&gt;

&lt;p&gt;The second option (not the last) is through the Power BI REST API, where we are interested in this endpoint - &lt;a href=&quot;https://learn.microsoft.com/en-us/rest/api/power-bi/dataflows/get-dataflow-transactions?id=DP-MVP-5003801&quot;&gt;Dataflow Transactions&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;curl --location --request GET &apos;https://api.powerbi.com/v1.0/myorg/groups/{WORKSPACE-ID}/dataflows/{DATAFLOW-ID}/transactions&apos; \
--header &apos;Authorization: Bearer token&apos; \&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This endpoint can get updates on the selected Dataflow. It can also be nicely wrapped into some script that gets individual dataflows and then gradually gets individual updates for them and saves them in some resulting file/database.&lt;/p&gt;

&lt;p&gt;It returns data approximately similar to those that come from Power Automate:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;@odata.context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;refreshType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ViaApi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;endTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;refreshType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OnDemand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;startTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;endTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Success&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This variant will also be subject to the need to log in either by the &lt;strong&gt;user&lt;/strong&gt; or the &lt;strong&gt;Service Principal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That is all that is necessary to say about this variant. I will be pleased if you ever share your creations from it publicly.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Every critical point within your data architecture &lt;strong&gt;should be monitored&lt;/strong&gt;, and &lt;strong&gt;mechanisms&lt;/strong&gt; should be created that will allow you &lt;strong&gt;to prevent outages or disruptions&lt;/strong&gt; or at least create the possibility &lt;strong&gt;to respond promptly&lt;/strong&gt; to the situation. Power BI takes care of it for you, so if something fails, at least you have historical data, and it notifies you anyway. So they are trying to fulfill this need for you. However, time moves forward, so it is necessary to reach for more actionable variants than &lt;strong&gt;E-mail&lt;/strong&gt;. At the same time, monitoring all critical points in one central place is crucial so that work is not unnecessarily added at moments when it is least convenient.&lt;/p&gt;
</description>
                <pubDate>Mon, 06 Feb 2023 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/dataflows-refresh-monitoring</link>
                <guid isPermaLink="true">http://localhost:4000/dataflows-refresh-monitoring</guid>
                
                <category>power-automate</category>
                
                <category>api</category>
                
                <category>dataflow</category>
                
                <category>admin</category>
                
                <category>monitoring</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;They do their work in the background, and we don’t see them (only the results of their work). But from time to time, we also want to get some data thanks to them and be able to expand or even fill our datasets. &lt;strong&gt;So how to extract them and get their information directly into Power BI?&lt;/strong&gt; That is the subject of this article.&lt;/p&gt;

&lt;p&gt;But let’s start with a bit of the theory. It should help us get through everything.&lt;/p&gt;

&lt;h2 id=&quot;window-full-of-theory&quot;&gt;Window full of theory&lt;/h2&gt;

&lt;p&gt;API, or Application Programming Interface, is an interface that allows you to communicate with the source system/database through defined &lt;strong&gt;methods&lt;/strong&gt;. This makes it easier for us. We do not need to know exactly how the underlying systems or databases were created, their structure, or what each attribute means. In short, &lt;strong&gt;we call the method, which takes care of everything&lt;/strong&gt;. Isn’t it beautiful?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Each API is unique&lt;/strong&gt; and may have requirements for communication security, approaches, methods used, query names, type of answers, etc. Therefore, reading the API &lt;strong&gt;documentation&lt;/strong&gt; we want to use is a good idea. &lt;em&gt;(If it exists, of course)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As such, you can imagine the API as a waiter in a restaurant, which provides everything you need based on your request. From seating to bringing food and drinks to the final payment. You also don’t have to deal with how individual parts of the restaurant work at any given moment. The main thing is that they work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/restaurant.png&quot; alt=&quot;API Example&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;API Example with RESTaurant&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can notice the &lt;strong&gt;GET&lt;/strong&gt; or &lt;strong&gt;POST&lt;/strong&gt; type naming before the requests in the image. It is because these names are call types that can be used against the API. Besides these two, there are others—for example, &lt;strong&gt;DELETE&lt;/strong&gt;, &lt;strong&gt;PUT&lt;/strong&gt;, or &lt;strong&gt;PATCH&lt;/strong&gt;. But Power Query can only work with the mentioned &lt;strong&gt;GET&lt;/strong&gt; and &lt;strong&gt;POST&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When working with the API, we use the addresses against which the mentioned types of calls are made. At the same time, these addresses define what we are trying to do or get, as it is the form of the method to be executed. Some methods can also receive queries, with which the &lt;strong&gt;returned/searched Content can be modified, filtered, expanded, etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To understand it, it is a good idea to divide the address, &lt;strong&gt;URL&lt;/strong&gt;, or &lt;strong&gt;IP address&lt;/strong&gt; into a few segments to help us understand it. So let’s divide it into three parts. Let’s call the first part the &lt;strong&gt;Base&lt;/strong&gt; address, the second the &lt;strong&gt;Relative Path&lt;/strong&gt;, and the third the &lt;strong&gt;Query&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/urlDefinition.png&quot; alt=&quot;Dividing part of URL&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Dividing part of URL&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Base&lt;/strong&gt; part of the address is the part that is immutable (respectively, we will not change it in any way in the course of our inquiries), and we will set up &lt;strong&gt;verification against it&lt;/strong&gt;. Power Query allows you to make this part dynamic, but please don’t do it! Why? Because then you won’t be able to update such a query in the Power BI Service because the &lt;strong&gt;service won’t be able to 100% verify that the validation&lt;/strong&gt; you set for the source cannot change during runtime. So it declares that you are using a dynamic data source and will not allow refresh.&lt;/p&gt;

&lt;p&gt;If you have any part of the address that can change or even know will change over time, put it as &lt;strong&gt;Relative Path&lt;/strong&gt;. Power BI will then set validation against the original part of the address and will count on the fact that your validation will also work on these “associated” parts of the address.&lt;/p&gt;

&lt;p&gt;The query part of the address always &lt;strong&gt;starts with a question mark “?”&lt;/strong&gt;. Which attributes can be used for the &lt;strong&gt;Query&lt;/strong&gt; and which operands have been implemented depends purely on the developers. You should read the mentioned documentation and experiment.&lt;/p&gt;

&lt;p&gt;We are getting close to the conclusion of the introductory theory! I promise. We are left with the &lt;strong&gt;last two critical parts&lt;/strong&gt;, which APIs primarily work with. I’m talking about the so-called &lt;strong&gt;Header&lt;/strong&gt; of your call and the &lt;strong&gt;Content&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Within the Header, we define the format in which we want to return the values, any security elements, and much more. It is essential to know that we can also set them in Power Query, and it can be done very quickly.&lt;/p&gt;

&lt;p&gt;The Content that we want to pass as part of our API query can also be defined in Power Query. The presence of Content, even empty Content, automatically turns a &lt;strong&gt;GET&lt;/strong&gt; query into a &lt;strong&gt;POST&lt;/strong&gt; query in Power Query. At the same time, it is necessary to know in which API format our data can be received and, therefore, to prepare and save it in binary form in advance.&lt;/p&gt;

&lt;p&gt;What was said, but now in a shorter way:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/shorterExpl.png&quot; alt=&quot;What Power Query can do!&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;What Power Query can do!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-query-vs-simple-api&quot;&gt;Power Query vs. simple API&lt;/h2&gt;

&lt;p&gt;It will be best to show it practically. And let’s start easy. Let’s download the data from some straightforward API. It means an API that doesn’t have complex authentication and where we will get only a few or &lt;strong&gt;page-by-page responses&lt;/strong&gt; (If you would like to learn more about this, here is a link to an article by &lt;a href=&quot;https://www.linkedin.com/in/rickmaurinus/&quot;&gt;Rick de Groot&lt;/a&gt; that explains it very well - &lt;a href=&quot;https://gorilla.bi/power-query/list-generate-api-calls/&quot;&gt;List Generate API Calls&lt;/a&gt;). For demonstration purposes, I will choose one of the APIs, which is also very often recommended for some programming practice. For example, &lt;a href=&quot;https://newsapi.org/&quot;&gt;NewsAPI&lt;/a&gt;. This API can return news gathered from different corners of the world.&lt;/p&gt;

&lt;p&gt;If you are a developer, you can use this API for free in the &lt;strong&gt;TRIAL version&lt;/strong&gt; and try many things on it.&lt;/p&gt;

&lt;p&gt;It only takes a little to get basic answers. Just create an account and take the generated API key in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/apiKey.png&quot; alt=&quot;API KEY&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;API KEY&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As the &lt;a href=&quot;https://newsapi.org/docs/authentication&quot;&gt;documentation&lt;/a&gt; says, this key can be used in three ways to authenticate yourself. This is fantastic for practicing different routines:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/officialDocumentation.png&quot; alt=&quot;Image of official NewsAPI documentation&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Image of official NewsAPI documentation&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;api-key-as-a-query-part-of-the-url&quot;&gt;API Key as a Query part of the URL&lt;/h3&gt;

&lt;p&gt;All you have to do is choose one of the options and send a request for data. For example, this call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;curl --location -g --request GET &apos;https://newsapi.org/v2/top-headlines?country=us&amp;amp;apiKey={apiKey}&apos;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The attached cURL notation shows that I will use the API Key within the URL address for this attempt. Specifically within the query section. But there is another parameter, namely the &lt;strong&gt;“country” parameter&lt;/strong&gt;, so we can immediately show ourselves how to create such queries!&lt;/p&gt;

&lt;p&gt;One Power Query function will be enough for almost everything. The “almighty” &lt;strong&gt;&lt;a href=&quot;https://learn.microsoft.com/powerquery-m/web-contents?id=DP-MVP-5003801&quot;&gt;Web.Contents&lt;/a&gt;&lt;/strong&gt; function. Yes, a function can send a query to the site more. But this one is the best for our purposes!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Web.Contents(url as text, optional options as nullable record) as binary&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’ll stop by her again because this feature deserves it. Its first parameter is self-explanatory. It’s about &lt;strong&gt;“URL,”&lt;/strong&gt; and we would probably all just come and use &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; and &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;V&lt;/kbd&gt; to put the full address here. So please don’t do it! Do you remember what I mentioned in the previous part of the article? We can split the address into three pieces and thus make sure that if we make a function out of it, for example, it can still be updated in the Power BI Service.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Base: https://newsapi.org/v2&lt;/li&gt;
  &lt;li&gt;Relative Path: top-headlines&lt;/li&gt;
  &lt;li&gt;Query: country=us&amp;amp;apiKey={apiKey}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I’ve laid out this address for you like this, notice that I don’t leave any characters that serve as dividers anywhere. I removed the &lt;strong&gt;”/”&lt;/strong&gt; character between &lt;strong&gt;Base&lt;/strong&gt; and &lt;strong&gt;Relative Path&lt;/strong&gt; and the &lt;strong&gt;”?”&lt;/strong&gt; character between &lt;strong&gt;Relative Path&lt;/strong&gt; and Query. They are not necessary. &lt;strong&gt;“Web.Contents”&lt;/strong&gt; function will fill them in by themselves!&lt;/p&gt;

&lt;p&gt;These and other parts can be inserted into the second parameter, &lt;strong&gt;“options.”&lt;/strong&gt; According to the documentation, this parameter can accept many beautiful options, such as &lt;strong&gt;“Query, ApiKeyName, Headers, Timeout, ExcludedFromCacheKey, IsRetry, ManualStatusHandling, RelativePath, and Content.”&lt;/strong&gt; More pieces of information are in the official &lt;strong&gt;&lt;a href=&quot;https://learn.microsoft.com/powerquery-m/web-contents?id=DP-MVP-5003801&quot;&gt;documentation&lt;/a&gt;&lt;/strong&gt;. Just watch out! Although within the function, it is said that this parameter accepts type Any, deeper down, it is said that it should be Type Record. Let’s assume that we will pass the function a record with the attributes whose names I listed here.&lt;/p&gt;

&lt;p&gt;Let’s try it out:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pq&quot; data-lang=&quot;pq&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    Web&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;Contents&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://newsapi.org/v2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
            RelativePath &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;top-headlines&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            Query &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;us&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;apiKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you put this code into Power Query and put your key in the prepared empty string, you should see the following response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/responseFromAPI.png&quot; alt=&quot;Response from API&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Response from API&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This API returns its response in approximately the following form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;totalResults&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;articles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;urlToImage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;publishedAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first thing evident from this, which was already evident a while ago in the image, is the response that came back in &lt;strong&gt;JSON&lt;/strong&gt;. For its general extraction, we have the function &lt;strong&gt;&lt;a href=&quot;https://learn.microsoft.com/powerquery-m/json-document?id=DP-MVP-5003801&quot;&gt;Json.Document()&lt;/a&gt;&lt;/strong&gt;. And if we wrap up the previous result, you will be assured that everything is fine!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/positiveResults.png&quot; alt=&quot;Positive results&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Positive results&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;api-key-covered-in-headers&quot;&gt;API Key covered in Headers&lt;/h3&gt;

&lt;p&gt;So we can already send it within the URL as part of the Query. So let’s show how we will do o within the Header. Suppose we extend the original code in the &lt;strong&gt;“options”&lt;/strong&gt; framework with Headers and define the input according to the specification in the documentation. In that case, we should reach something like this in the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pq&quot; data-lang=&quot;pq&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    Json&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;Document&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        Web&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;Contents&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;https://newsapi.org/v2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
                RelativePath &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;top-headlines&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                Headers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;                    #&quot;X-Api-Key&quot; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
                Query &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;country&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;us&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can notice in the code that I used the offered &lt;strong&gt;“X-Api-Key” option&lt;/strong&gt;. Unfortunately, due to the presence of the &lt;strong&gt;”-“&lt;/strong&gt; character, I have to wrap the entire attribute name in a fixed naming notation using &lt;strong&gt;#”“&lt;/strong&gt;. However, after execution in Power Query, the result is the same and functional again!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/positiveResults.png&quot; alt=&quot;Positive results&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Positive results&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So we can also pass any other header components this way. So if the API will have specific requirements for header content or if we want to set it via &lt;strong&gt;#”Content-Type”&lt;/strong&gt; for example, you already know exactly where!&lt;/p&gt;

&lt;h3 id=&quot;sending-data-to-the-api&quot;&gt;Sending data to the API&lt;/h3&gt;

&lt;p&gt;So we have the basic parts almost all covered! We’re missing one last one! It is the passing of Content within the &lt;strong&gt;Content part&lt;/strong&gt; of the call. It is the part that changes the &lt;strong&gt;GET&lt;/strong&gt; method we’ve used all along to a &lt;strong&gt;POST&lt;/strong&gt; method. I understand if a question mark just popped into your head! After all… Why would I want to send data away from Power Query? It is only sometimes necessary to send data directly away. Sometimes, even just API authentication processes, it is necessary to send authentication information that will return you a &lt;strong&gt;temporary key&lt;/strong&gt; &lt;em&gt;(token)&lt;/em&gt; that you can use to retrieve your data. For example, suppose you’re trying to get data from the &lt;strong&gt;Power BI REST API&lt;/strong&gt;. In that case, you will have a different key than we had with the NewsAPI. Here, you must authenticate against &lt;strong&gt;Azure Active Directory (AAD)&lt;/strong&gt; either as a user or as an application. AAD will return you an access key after validating basic permissions, which will have a specific &lt;strong&gt;lifetime&lt;/strong&gt; &lt;em&gt;(relatively short)&lt;/em&gt; and will need to be renewed once it expires. &lt;strong&gt;So in such cases, the idea is that you create the first POST request and then pass its output to the GET request.&lt;/strong&gt; But let’s show it!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pq&quot; data-lang=&quot;pq&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;AzureADTenantID &lt;span class=&quot;nc&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; AzureApplicationClientSecret &lt;span class=&quot;nc&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; AzureApplicationClientID &lt;span class=&quot;nc&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://analysis.windows.net/powerbi/api&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tokenResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Json&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;Document&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                Web&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;Contents&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;s&quot;&gt;&quot;https://login.windows.net&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
                        RelativePath &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; AzureADTenantID &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/oauth2/token&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;hll&quot;&gt;                        Content &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Text&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;ToBinary&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                            Uri&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;BuildQueryString&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                                &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                                    &lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; AzureApplicationClientID&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                                    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                                    &lt;span class=&quot;n&quot;&gt;grant_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;client_credentials&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                                    &lt;span class=&quot;n&quot;&gt;client_secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; AzureApplicationClientSecret
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                                &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;                        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;                        Headers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
                            Accept &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;token_output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;token_output&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t be afraid of this code. It is pretty straightforward. I have only wrapped the whole thing in a function so that we could pass the necessary parts to this call simply and on call. Primarily, from &lt;strong&gt;line number 10&lt;/strong&gt;, we added an attribute called &lt;strong&gt;Content&lt;/strong&gt;. As I mentioned at the beginning, we have to give the Content in binary form. That’s the reason why the &lt;strong&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/powerquery-m/text-tobinary?id=DP-MVP-5003801&quot;&gt;Text.ToContent()&lt;/a&gt;&lt;/strong&gt; function wraps the Content. It translates the Text into binary for us. Instead of the &lt;strong&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/powerquery-m/uri-buildquerystring?id=DP-MVP-5003801&quot;&gt;Uri.BuildQueryString&lt;/a&gt;&lt;/strong&gt; function, we could also have a direct entry of our &lt;strong&gt;Content&lt;/strong&gt;, or you can define it as a JSON, which would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;client_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;grant_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;client_credentials&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;client_secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;On the contrary, it would be more work because you would have to connect the parameters with the Text and remember that we also promote quotation marks directly into the Text, which would be more laborious than using the one URI function.&lt;/p&gt;

&lt;p&gt;But let’s get back to the code as such. There is no need to know precisely what a &lt;strong&gt;Client’s Secret&lt;/strong&gt; or a &lt;strong&gt;Resource&lt;/strong&gt; is. But if you are interested, you can find a session where I explain it in the following link: &lt;a href=&quot;/power-query-vs-power-bi-rest-api&quot;&gt;Power Query vs Power BI REST API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And the code itself comes from my &lt;strong&gt;Power BI REST API function library&lt;/strong&gt;, which you can find on GitHub: &lt;a href=&quot;https://github.com/tirnovar/Power_BI_REST_API_PQ&quot;&gt;Power BI REST API PQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is important to remember that even if you send an &lt;strong&gt;empty string&lt;/strong&gt; within the Content, &lt;strong&gt;the POST method will be executed&lt;/strong&gt;, not the GET! Please keep this in mind. It might come in handy!&lt;/p&gt;

&lt;p&gt;This method, where you do POST once and GET a second time, has one major flaw! When you try to update something like this directly in the dataset, you can only do it in Power BI Desktop. Not in Power BI Service! Why? You can find the answer to this question in the &lt;a href=&quot;https://blog.crossjoin.co.uk/2019/01/13/power-bi-data-privacy-cloud-web-data-sources/&quot;&gt;following article by Chris Webb&lt;/a&gt;. It follows that where Dataset fails, Dataflow can work! The result can then also look like the following form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/APIs as Power BI Datasources/dataflowStructure.png&quot; alt=&quot;Dataflows as a solution&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Dataflows as a solution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Or you can make a &lt;strong&gt;custom connector&lt;/strong&gt; (for example, using the new &lt;a href=&quot;https://powerquery.microsoft.com/en-us/blog/power-query-sdk-for-visual-studio-code-public-preview?id=DP-MVP-5003801&quot;&gt;SDK for Visual Studio Code&lt;/a&gt;), which will behave the same as the queries themselves. Still, you can use it with the &lt;strong&gt;Data Gateway&lt;/strong&gt; to &lt;strong&gt;update the dataset directly&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;But there is no complex magic for transferring data to the REST API. It’s simple.&lt;/strong&gt; Just stick to the basic assumptions, limits, and requirements.&lt;/p&gt;

&lt;p&gt;In any case, it is also necessary to say that: If something works, it does not mean we should always do it. Sometimes, loading the data from the &lt;strong&gt;API&lt;/strong&gt; straight to Power BI is better, and in that case, &lt;strong&gt;approaching it incrementally&lt;/strong&gt; and not downloading all the data every time &lt;strong&gt;(if possible)&lt;/strong&gt;. But on the other hand, when it comes to a larger volume of data, more frequent updates, the necessity of maintaining history, etc., then download the data in a way other than using Power Query and save it in such a way that you can then reuse it in other systems.&lt;/p&gt;

&lt;h3 id=&quot;recommended-additional-links&quot;&gt;Recommended additional links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thebiccountant.com/2020/05/15/miss-last-page-paging-power-bi-power-query/&quot;&gt;THE BICCOUNTANT - How not to miss the last page when paging with Power BI and Power Query&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gorilla.bi/power-query/list-generate-api-calls/&quot;&gt;RICK DE GROOT - How to use List.Generate to make API Calls in Power Query M&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.crossjoin.co.uk/2022/11/28/web-contents-text-concatenation-and-dataset-refresh-errors-in-power-bi-power-query/&quot;&gt;CHRIS WEBB - Web.Contents, Text Concatenation And Dataset Refresh Errors In Power BI and Power Query&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sun, 22 Jan 2023 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/apis-as-power-bi-datasources</link>
                <guid isPermaLink="true">http://localhost:4000/apis-as-power-bi-datasources</guid>
                
                <category>m</category>
                
                <category>power_query</category>
                
                <category>api</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;The data dimension is one of the most fundamental dimensions needed in reporting. That is because we are primarily interested in results from the point of view of the passage of time.&lt;/p&gt;

&lt;p&gt;Variants of how to produce this dimension in &lt;strong&gt;DAX, SQL, Excel,…&lt;/strong&gt; But what about Power Query has been presented for a long time? By itself, or from the point of view of its language, it can also offer this option for creating a Date dimension. There are more options for how. Here are a few variants that I will cover here today:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Number list variant&lt;/li&gt;
  &lt;li&gt;Date list variant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two variants we can take as a primary division. But I will break it down into other options from the point of view of how the creation of separate columns for this dimension will be approached:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Column-by-step creation&lt;/li&gt;
  &lt;li&gt;Columns-in-Record creation&lt;/li&gt;
  &lt;li&gt;By #table creation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s set some game rules at the beginning. First, it will be about the dimension we create from &lt;strong&gt;1.1.2000&lt;/strong&gt; to &lt;strong&gt;31.12.2050&lt;/strong&gt;. Furthermore, the following columns with specific data types must exist at the end of the procedure for each variant:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Date and date&lt;/li&gt;
  &lt;li&gt;Year as Int64.Type&lt;/li&gt;
  &lt;li&gt;Month as Int64.Type&lt;/li&gt;
  &lt;li&gt;MonthName as text&lt;/li&gt;
  &lt;li&gt;Day as Int64.Type&lt;/li&gt;
  &lt;li&gt;WeekDay as Int64.Type&lt;/li&gt;
  &lt;li&gt;WeekDayName as text&lt;/li&gt;
  &lt;li&gt;Quarter as Int64.Type&lt;/li&gt;
  &lt;li&gt;QuarterName as text&lt;/li&gt;
  &lt;li&gt;isWeekend as logical&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That might give us enough values for some testing as well.&lt;/p&gt;

&lt;h2 id=&quot;number-list-and-date-list&quot;&gt;Number list and Date list&lt;/h2&gt;
&lt;p&gt;In both of these variants, I have to start by creating a list of values that will serve as an input set, which I will then expand by individual columns. But why am I dividing it into &lt;strong&gt;Numbers&lt;/strong&gt; and &lt;strong&gt;Dates&lt;/strong&gt;? This is because when a person starts with Power Query or with the &lt;strong&gt;language M&lt;/strong&gt;, he very often comes to the operand &lt;strong&gt;”..”&lt;/strong&gt;, which forms a sequence of values &lt;strong&gt;from the left value to the right&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;codebox&quot;&gt;= {1..10}&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/listGenerator.png&quot; alt=&quot;List generator&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;List generator&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It must always be an increasing sequence, so if I were to use &lt;strong&gt;”={10..1}”&lt;/strong&gt; I would get an blank response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/blankList.png&quot; alt=&quot;Blank list&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Blank list&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the same time, it should also be said that the &lt;strong&gt;”..” operand can work with strings.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/listOfLetters.png&quot; alt=&quot;List of letters&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;List of letters&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So it will work with dates, too. &lt;strong&gt;NO!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/errorAfterDates.png&quot; alt=&quot;Returned Error&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Returned Error&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But dates are convertible to numbers. The number 1 can be converted in Power Query to the date (31/12/1889), and from this date, the date of the others is derived. So the date 1/1/2023 can be represented by the number &lt;strong&gt;44927&lt;/strong&gt;, and our input interval will be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1/1/2000 = 36526&lt;/li&gt;
  &lt;li&gt;31/12/2050 = 55153&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I subtract these numbers, I will find that the resulting table would have 18627 rows. This number tells us that if we either directly used these numbers or used this procedure “={Number.From(start_date)..Number.From(end_date)}”, we would get a list of numbers that are convertible to the correct date range.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/datesLikeNumbers.png&quot; alt=&quot;List of dates created by numbers&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;List of dates created by numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This procedure works but needs to be simplified. &lt;strong&gt;There is another way to create a Date list.&lt;/strong&gt; It is more straightforward. This is a function:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;= List.Dates(start as date, count as number, step as duration)&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The “start” and “count” parameters are relatively self-explanatory. In short, the starting date and the number of steps that will be taken from this selected day forward. The last parameter defines whether the steps will be by days, hours, minutes, or seconds. We can define it via the “#duration()” initiator.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;#duration(days as number, hours as number, minutes as number, seconds as number)&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;#duration(1,0,0,0) = 1 day&lt;/li&gt;
  &lt;li&gt;#duration(5,0,0,0) = 5 days&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, we can also define that the date list will contain, for example, every second day from the initial day. But to achieve our desired List, it will have to look like this:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;= List.Dates(#date(2000,1,1),18627,#duration(1,0,0,0))&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/listOfDates.png&quot; alt=&quot;List of dates&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;List of dates&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have basic options for creating a list of dates. But now it will be necessary to proceed further. So let’s start again from simpler variants to more complex ones.&lt;/p&gt;

&lt;h2 id=&quot;adding-columns&quot;&gt;Adding columns&lt;/h2&gt;
&lt;p&gt;To be able to add more columns at all, we have to turn the List into a table. For example, by using &lt;strong&gt;“To Table”&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/toTable.png&quot; alt=&quot;To table&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;To table&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another option is through the initiator of the table (#table), but we will get to that later. Let’s stick to the fact that we want to create a new one from a simple conversion to a table. Just note that the List converted to a table in this way has the name “Column1” by default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/columnOneName.png&quot; alt=&quot;Column1 as a name of column&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Column1 as a name of column&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It could be better because we would have to rename this column. So instead, let’s modify the code that Power Query created for us and let this &lt;strong&gt;“table” create a column with the specific name “Date.”&lt;/strong&gt; We achieve this by &lt;strong&gt;replacing the first “null”&lt;/strong&gt; in the entry with a custom &lt;strong&gt;list&lt;/strong&gt; that will contain the &lt;strong&gt;name we want&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/nativeNameChange.png&quot; alt=&quot;Defined name of new column&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Defined name of new column&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;column-by-step&quot;&gt;Column-by-step&lt;/h3&gt;

&lt;p&gt;We change the column’s data type to “date,” and we can start creating columns. If I follow the &lt;strong&gt;column-by-step&lt;/strong&gt; method, I can create most of the necessary / mentioned columns through the UI. &lt;strong&gt;By Add columns tab -&amp;gt; From Date &amp;amp; Time section&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/dateParser.png&quot; alt=&quot;From Date &amp;amp; Time&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;From Date &amp;amp; Time&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We would need more than two of the required columns: &lt;strong&gt;QuarterName&lt;/strong&gt; and &lt;strong&gt;isWeekend&lt;/strong&gt;. So we have to create them ourselves.&lt;/p&gt;

&lt;p&gt;It’s simple for quarters. We get the quarter number, turn it into text, and concatenate it with the letter &lt;strong&gt;“Q”&lt;/strong&gt; to get output like &lt;strong&gt;“1Q”, “2Q,”&lt;/strong&gt; and so on.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;QuarterName = Table.AddColumn( &amp;lt; previousStep &amp;gt; , &quot;QuarterName&quot;, each Text.From(Date.QuarterOfYear([Date])) &amp;amp; &quot;Q&quot;, type text)&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Deciding whether it’s the weekend won’t be so fast. First of all, note that the &lt;strong&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/powerquery-m/date-dayofweek?id=DP-MVP-5003801&quot;&gt;Date.DayOfWeek()&lt;/a&gt;&lt;/strong&gt; function returns the days of the week as &lt;strong&gt;numbers between 0 and 6&lt;/strong&gt;. And &lt;strong&gt;0&lt;/strong&gt; is &lt;strong&gt;Sunday&lt;/strong&gt;. Unless we define it differently in the second parameter of the function. If, for example, we used the number 1 in the second parameter, then the numbers of the days of the week will be returned a little differently because &lt;strong&gt;Monday&lt;/strong&gt; will now be returned as a &lt;strong&gt;position number 0&lt;/strong&gt;. Nevertheless, it can make it very easy for us to prepare this decision because, in that case, it is enough to say that if the returned number is greater than &lt;strong&gt;4 (Friday)&lt;/strong&gt;, then it is the weekend.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;isWeekend = Table.AddColumn(&amp;lt; previousStep &amp;gt; , &quot;Day of Week&quot;, each if Date.DayOfWeek([Date],1) &amp;gt; 4 then true else false, type logical)&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;With these two entries, we already have all the columns we need. Note one small thing. We didn’t have to set the data types for individual columns. The same goes for the columns that I wrote here for you. It is because those native functions for creating columns from the Datum column type use the fourth attribute of the &lt;strong&gt;Table.AddColumn&lt;/strong&gt; function allows you to tell what data type the column should have. &lt;strong&gt;Just BEWARE!!!&lt;/strong&gt; Suppose your calculation returns output in a format other than that specified in this fourth attribute. In that case, the Power Query interface will not notify you of the error, and you will only find out about it when you try to load the data into the model. It differs from changing the data type, which tries to convert each value in a column while validating it. This fourth attribute is more like your assurance to Power Query that it doesn’t have to deal with the data type because you handled it.&lt;/p&gt;

&lt;p&gt;The full entry is here:
&lt;script src=&quot;https://gist.github.com/tirnovar/f46d7b4034412b3e97a6dcb4b49f6712.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;columns-in-record&quot;&gt;Columns-in-Record&lt;/h3&gt;
&lt;p&gt;This method uses the fact that when a new column is created, a column can be created that will &lt;strong&gt;contain a record with all the columns inside it&lt;/strong&gt;, and then we “just” expand this column. The solution should be created in fewer steps than in the previous variant.&lt;/p&gt;

&lt;p&gt;It should be enough for us to use adding a new column and define the creation expression like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/recordExpression.png&quot; alt=&quot;Record Expression&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Record Expression&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The result will look like the new column will contain the values marked as a record. But the preview can clarify its details for us:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/recordView.png&quot; alt=&quot;Record preveiw&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Record preveiw&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Within this variant, however, we then have to define their data types for all expanded columns because, after the expansion, there will be no spontaneous typing or transfer of the data type. In short, all columns will be of type &lt;strong&gt;ANY&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But the resulting query will look like the following:
&lt;script src=&quot;https://gist.github.com/tirnovar/fe0ef1b9fd8df521341045b04954f383.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We have left with the last method I mentioned at the beginning. (I remind you again that there are many more methods.) It is a method via the #table initiator.&lt;/p&gt;

&lt;h3 id=&quot;table&quot;&gt;#table&lt;/h3&gt;
&lt;p&gt;This method requires a step back! We only have a list and a table. Why? Because it is an initiator that creates the table for us as part of its course. It establishes it with specific parameters such as column names or even their data types.&lt;/p&gt;

&lt;p&gt;The #table looks very trivial in its &lt;a href=&quot;https://learn.microsoft.com/en-us/powerquery-m/sharptable?id=DP-MVP-5003801&quot;&gt;definition&lt;/a&gt;, but be aware.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;#table(columns as any, rows as any) as any&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It can do a lot! But how to combine our List into this initiator? Let’s pass the rows, or the second attribute, to it as one List containing the other lists. And the &lt;strong&gt;content of single sub-lists will be “just” arranged in columns in order.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But now we need a list of lists, not only one layer with dates. So we need to look for some function that can go through our List and modify its values according to our input. This is something that the &lt;strong&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/powerquery-m/list-transform?id=DP-MVP-5003801&quot;&gt;List.Transform&lt;/a&gt;&lt;/strong&gt; function can come in handy.&lt;/p&gt;

&lt;p&gt;The procedure will be similar to when we defined that record for the new column. However, it will be a little easier because we don’t have to define the names yet, and we can use the character &lt;strong&gt;“_“&lt;/strong&gt; as a wildcard for the edited date. Just remember two things! We will still need the modified date, so we should keep it as well, and we define a &lt;strong&gt;LIST&lt;/strong&gt;, so we have to store the result in these brackets &lt;strong&gt;”{}.”&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/tirnovar/4fe0421a21d0cbff670b9c8cf4424f16.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now we have an actual list of lists. And the values in individual Lists are always in the same order. So we can have them spread out on a table.&lt;/p&gt;

&lt;p&gt;We can either save the procedure prepared in this way in a separate step and then call it into the &lt;strong&gt;#table&lt;/strong&gt; or insert it directly into the &lt;strong&gt;#table&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But before we do that, a few more words about the fact that we have created rows but no columns. If we wanted to create columns without a data type, we could pass the individual names within the List, but if we want to give it the data type as well, we have to do it a little differently:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/tirnovar/59a37e2bdd84a225002d5eab2b09da8d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The column definitions must be in the same order as they are defined within the “&lt;strong&gt;List.Transform&lt;/strong&gt;” output! You can also evaluate this entry in Power Query. The result will be that the value “table” will be returned to you, and the query icon will be a table icon with a question mark. But no data anywhere.&lt;/p&gt;

&lt;p&gt;The miracle will happen after we connect these two parts, i.e., the columns and rows within the &lt;strong&gt;#table&lt;/strong&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/tirnovar/80fce696163f9eaf17d2d7ecae9a6472.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Because this code will make, the table materializes as we need.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/dateKeyTable.png&quot; alt=&quot;DateKey Table&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;DateKey Table&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This expression can be used as a single-step query that creates the data dimension entirely. At the same time, we can easily add additional columns thanks to the extension of record types and the “&lt;strong&gt;List.Transform&lt;/strong&gt;” function. At the same time, when going through that transformation, we can also use inner &lt;strong&gt;“Let .. in expressions.&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;Again, one small warning, as with the fourth attribute for &lt;strong&gt;Table.AddColumn&lt;/strong&gt;. So even here, the values are not retyped, and the UI cannot recognize that the column’s content needs to understand the data type. Or, even in this variant, Power Query trusts us that we have arranged for the result to be in the correct type.&lt;/p&gt;

&lt;h2 id=&quot;speed-comparison-and-summary&quot;&gt;Speed comparison and Summary&lt;/h2&gt;

&lt;p&gt;It would be worth discovering how these procedures fare in terms of speed. So let’s use the Diagnosis within the Power Query -&amp;gt; Tools tab. And measure the speed of individual resulting tables.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Date dimensions in Power Query/speedSummary.png&quot; alt=&quot;Speed Summary&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Exclusive duration of tested Queries - Speed Summary&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the measurement results, the resulting #table variant is noticeably more advantageous than the other variants from the point of view of speed. At the same time, the option where we create columns at once using a record is faster than the method where we create individual columns step by step. All the variants have the same columns and values and perform the same calculations.&lt;/p&gt;

&lt;p&gt;We’re still talking about flash results because it’s milliseconds, so I wouldn’t get too worked up about which option in this case and lean towards the idea that it’s good to use the option that we understand and will manage well.&lt;/p&gt;

&lt;p&gt;But at the same time, a scenario will come when you need to optimize the speed of data transformation, and then some of these tricks come in handy. For example, you create all the necessary columns in records and only then extract them into columns.&lt;/p&gt;
</description>
                <pubDate>Mon, 09 Jan 2023 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/date-dimensions-in-power-query</link>
                <guid isPermaLink="true">http://localhost:4000/date-dimensions-in-power-query</guid>
                
                <category>m</category>
                
                <category>power_query</category>
                
                <category>date</category>
                
                <category>dimension</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;It is a function that can create a moving “window” above the input table and apply it to the computing context. That &lt;strong&gt;“window”&lt;/strong&gt; is defined quite similarly, as it was in the case of the &lt;strong&gt;INDEX&lt;/strong&gt; function. Or that the numerical representation of the position &lt;strong&gt;(0)1…X or X…-1(0)&lt;/strong&gt; is used. But there is one fundamental difference. &lt;strong&gt;INDEX&lt;/strong&gt; requires only one such representative, &lt;strong&gt;but the WINDOW function requires two.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Overall, the syntax can be confusing at first glance, so I’d rather spend some time on it:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;WINDOW ( from[, from_type], to[, to_type][, &amp;lt;\relation&amp;gt;][, &amp;lt;\orderBy&amp;gt;][, &amp;lt;\blanks&amp;gt;][, &amp;lt;\partitionBy&amp;gt;] )&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dax/window-function-dax?id=DP-MVP-5003801&quot;&gt;Official documentation for WINDOWS function&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fascinating are the parameters &lt;strong&gt;“FROM”&lt;/strong&gt; and &lt;strong&gt;“TO”&lt;/strong&gt; and the mentioned &lt;strong&gt;“from_type”&lt;/strong&gt; and &lt;strong&gt;“to_type.”&lt;/strong&gt; This may be completely obvious to someone, but I have already had the honor of encountering the question. “From To? How is that direction meant?”&lt;/p&gt;

&lt;p&gt;It all depends on the mentioned &lt;em&gt;“type” parameters&lt;/em&gt;. There are precisely two values ​​that these parameters take:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;ABS&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;REL&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you use the REL value, &lt;strong&gt;“FROM”&lt;/strong&gt; or &lt;strong&gt;“TO”&lt;/strong&gt; moves along the time axis with a positive number to the right and a negative one to the left. It is always a movement from the currently evaluated row of the input table. At the same time, the value 0 can be used for &lt;strong&gt;“FROM”&lt;/strong&gt; or &lt;strong&gt;“TO”&lt;/strong&gt; so that the just mentioned line is used as a &lt;strong&gt;“start”&lt;/strong&gt; or &lt;strong&gt;“end”&lt;/strong&gt; within the &lt;strong&gt;Window&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The ABS value is reminiscent of the &lt;strong&gt;INDEX&lt;/strong&gt; function since &lt;strong&gt;1&lt;/strong&gt; means the beginning of the input table/partition, and &lt;strong&gt;-1&lt;/strong&gt; the last line. The difference with &lt;strong&gt;INDEX&lt;/strong&gt; (to remind you) is that &lt;strong&gt;WINDOW&lt;/strong&gt; returns a range of rows, not just one row.&lt;/p&gt;

&lt;p&gt;Of course, these &lt;em&gt;“type” parameters&lt;/em&gt; can be combined so that you can have &lt;em&gt;“ABS”&lt;/em&gt; for &lt;strong&gt;“FROM”&lt;/strong&gt; and &lt;em&gt;“REL”&lt;/em&gt; for &lt;em&gt;“TO.”&lt;/em&gt; This is great for calculations of the &lt;strong&gt;YTD (Year-To-Date)&lt;/strong&gt; type.&lt;/p&gt;

&lt;h2 id=&quot;lets-try-it&quot;&gt;Let’s try it&lt;/h2&gt;
&lt;p&gt;For the DEMO, I will use the model I already used in the previous article regarding the &lt;strong&gt;INDEX&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/datamodel.png&quot; alt=&quot;Data model&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Data model&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And initial chart:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/revenue.png&quot; alt=&quot;Revenue&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Revenue&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here we have prepared a graph that contains the monthly results of Revenue. Of course, before the advent of the &lt;strong&gt;WINDOW&lt;/strong&gt; function, we would do &lt;strong&gt;YTD&lt;/strong&gt; equivalents using the &lt;strong&gt;TOTATYTD&lt;/strong&gt;, &lt;strong&gt;DATESYTD&lt;/strong&gt;, &lt;strong&gt;DATESBETWEEN&lt;/strong&gt;, or &lt;strong&gt;FILTER&lt;/strong&gt; functions, for example. But WINDOW should put these methods in its pocket.&lt;/p&gt;

&lt;p&gt;Using WINDOW, it might look like this:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;#&amp;nbsp;Sum&amp;nbsp;Revenue&amp;nbsp;YTD&amp;nbsp;Window&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;[#&amp;nbsp;Sum&amp;nbsp;of&amp;nbsp;Revenue&amp;nbsp;from&amp;nbsp;Pipepine],&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;WINDOW&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;,&amp;nbsp;ABS,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;,&amp;nbsp;REL,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year],&amp;nbsp;DateKey[Month]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;KEEP,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;PARTITIONBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Within the function, I use the parameter &lt;em&gt;FROM = 1&lt;/em&gt; with &lt;em&gt;TYPE = ABS&lt;/em&gt;, so I declare the Window from the beginning of the input table, and the parameter &lt;em&gt;TO = 0&lt;/em&gt; with &lt;em&gt;TYPE = REL&lt;/em&gt;, so the Window ends with the current line. Without the &lt;strong&gt;PARTITIONBY&lt;/strong&gt; function aimed at &lt;strong&gt;[Year]&lt;/strong&gt;, we would have a selected-period-to-date calculation. Because the &lt;strong&gt;PARTITIONBY&lt;/strong&gt; function is present, it creates individual partitions in the specified table based on the specified input. In our case, based on individual years. So &lt;em&gt;FROM = 1&lt;/em&gt;, &lt;em&gt;TYPE = ABS&lt;/em&gt; will always be the first day of the currently executed Year. Not in the very first Year of the entire entry.&lt;/p&gt;

&lt;p&gt;Which can be seen in the graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/revenueYtd.png&quot; alt=&quot;Revenue YTD&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Revenue YTD&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the same time, if we wanted to calculate the &lt;strong&gt;Year-End (YE)&lt;/strong&gt; value in combination with &lt;strong&gt;PARTITIONBY&lt;/strong&gt;, &lt;em&gt;TYPE = ABS&lt;/em&gt; would help us in both cases. Both &lt;em&gt;FROM = 1&lt;/em&gt; and &lt;em&gt;TO = -1&lt;/em&gt;. In short, it would set us back the whole Year.&lt;/p&gt;

&lt;p&gt;We can also slightly modify the metric used, for example, to get a different but equally important calculation! Specifically, the &lt;strong&gt;Trailing Twelve-Month (T12M)&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;#&amp;nbsp;Sum&amp;nbsp;Revenue&amp;nbsp;T12M&amp;nbsp;Window&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;[#&amp;nbsp;Sum&amp;nbsp;of&amp;nbsp;Revenue&amp;nbsp;from&amp;nbsp;Pipepine],&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;WINDOW&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-12&lt;/span&gt;,&amp;nbsp;REL,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;,&amp;nbsp;REL,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year],&amp;nbsp;DateKey[Month]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And the graph also beautifully reflected our change:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/revenueT12M.png&quot; alt=&quot;Revenue T12M&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Revenue T12M&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although it was only a tiny change in the metric, the result is entirely different and correct. In this, the WINDOW function is great, clear, and, above all, fast.&lt;/p&gt;

&lt;p&gt;I often encounter the requirement that the user be able to switch between these types of calculations himself. As for switching to a single metric, we can solve it in different ways… quickly via a disconnected table. But what about dynamically? So that the user can, for example, select the metrics he wants to see via “Personalize your Visuals” or promote them inside the graph using Field of Measures. So we have to reach for Calculation Groups.&lt;/p&gt;

&lt;h2 id=&quot;cooperation-with-the-calculation-group&quot;&gt;Cooperation with the Calculation Group&lt;/h2&gt;
&lt;p&gt;Let’s prepare three essential items on which we can test this behavior. We already have two in a way (they are mentioned above). First, we just replaced the measure with &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/calculationGroup.png&quot; alt=&quot;Calculation Group&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Prepared Calculation Group&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That last item will be selected-period-to-date (let’s give it an abbreviation like &lt;strong&gt;PTD&lt;/strong&gt;):&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;WINDOW&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;ABS,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;REL,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year],&amp;nbsp;DateKey[Month]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/ptd.png&quot; alt=&quot;Created PTD Calculation Item&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Created PTD Calculation Item&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s load this calculation group of ours into the model and for now, let’s try to apply the last mentioned item using Slicer, for example, to check that everything works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/activatedPTD.png&quot; alt=&quot;PTD Item activated via Slicer&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;PTD Item activated via Slicer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everything works as expected, which is good news! I’m glad we didn’t run into any surprises. But let’s load it with &lt;strong&gt;Field of Measures&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I will create a &lt;strong&gt;fieldOfMeasures&lt;/strong&gt; from three other measures, but they will have approximately similar Y-axis values. I really don’t want to mix apples and pears. So I selected &lt;strong&gt;Revenue&lt;/strong&gt;, &lt;strong&gt;Pipeline Potential&lt;/strong&gt;, and &lt;strong&gt;Costs&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;fieldOfMeasure&amp;nbsp;=&lt;br /&gt;{&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;Revenue&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;NAMEOF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;Measure&apos;[#&amp;nbsp;Sum&amp;nbsp;of&amp;nbsp;Revenue&amp;nbsp;from&amp;nbsp;Pipepine]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;Potential&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;NAMEOF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;Measure&apos;[#&amp;nbsp;Sum&amp;nbsp;of&amp;nbsp;Pipeline&amp;nbsp;Potential]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;Costs&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;NAMEOF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;Measure&apos;[#&amp;nbsp;Costs&amp;nbsp;of&amp;nbsp;Products]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;2&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;}&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Will the prepared expression in the calculation group be okay with it? To make the results more visible, I’ll switch from a bar chart to a line chart. After all, only three types of columns would probably not read very well with so many “categories” within the X-axis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/fieldParameterInAction.png&quot; alt=&quot;Measures provided via Field Parameter modified by Calculation item with WINDOW function&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Measures provided via Field Parameter modified by Calculation item with WINDOW function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No problem with that at all! &lt;em&gt;I almost don’t want to believe it.&lt;/em&gt; I can also select only some parameters, and everything will recalculate correctly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/selectionOfItems-PTD.png&quot; alt=&quot;Selected Revenue and Potential only&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Selected Revenue and Potential only&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/ytdCalculation.png&quot; alt=&quot;YTD Calculation&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;YTD Calculation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Dynamic windows in calculation groups/t12mCalculation.png&quot; alt=&quot;T12M Calculation&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;T12M Calculation&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;During the tests, I did not encounter any major obstacle or specialty, such as the multiple movements of the &lt;strong&gt;OFFSET&lt;/strong&gt; function. The &lt;strong&gt;WINDOW&lt;/strong&gt; function is probably the most transparent and readable of all the newly added functions: (&lt;strong&gt;OFFSET&lt;/strong&gt;, &lt;strong&gt;INDEX&lt;/strong&gt;, &lt;strong&gt;WINDOW&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You will love the WINDOW function as much as I do, and it will become part of your regularly used functions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in any more information about &lt;strong&gt;WINDOW&lt;/strong&gt;, I recommend the following links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pbidax.wordpress.com/2022/12/15/introducing-dax-window-functions-part-1/&quot;&gt;Introducing DAX Window Functions (Part 1) – pbidax (wordpress.com)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pbidax.wordpress.com/2022/12/23/introducing-dax-window-functions-part-2/&quot;&gt;INTRODUCING DAX WINDOW FUNCTIONS (PART 2) – pbidax (wordpress.com)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.minceddata.info/2022/12/14/unlock-an-ample-new-world-by-seeing-through-a-window/&quot;&gt;Unlock an ample new world by seeing through a window - Mincing Data - Gain Insight from Data (minceddata.info)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://data-mozart.com/looking-through-the-window-calculating-customer-lifetime-value-with-new-dax-functions/&quot;&gt;Looking through the WINDOW - Calculating customer lifetime value with new DAX functions! - Data Mozart (data-mozart.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Fri, 06 Jan 2023 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/dynamic-windows-in-calculation-groups</link>
                <guid isPermaLink="true">http://localhost:4000/dynamic-windows-in-calculation-groups</guid>
                
                <category>dax</category>
                
                <category>calculation_groups</category>
                
                <category>field_parameters</category>
                
                <category>window</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;Among the new DAX functions is the &lt;strong&gt;INDEX&lt;/strong&gt; function. I was skeptical about this. Because in comparison to the other added functions, there is not a dynamic position concerning the position currently being evaluated. It looks at the input table as a stable view, where it can move using the &lt;strong&gt;1…X&lt;/strong&gt; or &lt;strong&gt;-1…X&lt;/strong&gt; coordinates.&lt;/p&gt;

&lt;p&gt;But this feature gave me the idea that it could replace &lt;strong&gt;MINX&lt;/strong&gt; and &lt;strong&gt;MAXX&lt;/strong&gt; in some moments when moving around the Date dimension. After all, &lt;strong&gt;“1”&lt;/strong&gt; is &lt;strong&gt;MINX&lt;/strong&gt;, and &lt;strong&gt;“-1”&lt;/strong&gt; is &lt;strong&gt;MAXX&lt;/strong&gt;. This is quite simple. At the same time, in contrast to the OFFSET function, for example, it does not make shifts that would stack on top of each other with each subsequent &lt;strong&gt;OFFSET&lt;/strong&gt; (see the &lt;a href=&quot;/offset-its-usage-calculation-groups&quot;&gt;previous article&lt;/a&gt;), so it is much easier to understand.&lt;/p&gt;

&lt;p&gt;But without a practical example, it’s just an “interesting” feature. So I set out to explore it a bit and use it in a real scenario… as it happens, it’s a scenario that combines calculation groups at the same time.&lt;/p&gt;

&lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;We have the following model that stores data about the status of business opportunities based on the date, customer, product, state of opportunity, salesman, and goals for the particular year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/datamodel.png&quot; alt=&quot;Data Model&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Used model&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Our assignment is that we want to quickly analyze the year-on-year results of &lt;strong&gt;Revenue&lt;/strong&gt; and &lt;strong&gt;Profit&lt;/strong&gt; on one page of the report with the ability to see interannual changes if we want to. At the same time, we should be able to choose which years this analysis will be performed and, if necessary, be able to compare only the first and last year of the selection.&lt;/p&gt;

&lt;p&gt;Let’s start from the very beginning. First, you’ll need to prepare an input chart with all values and then modify the content using &lt;strong&gt;Calculation Groups&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I want to display the values in individual years to support the ability to imagine their significance, especially in the relationship between the required &lt;strong&gt;Revenue&lt;/strong&gt; and &lt;strong&gt;Profit&lt;/strong&gt;. For that purpose, the selected chart could represent the timeline. And since the values of individual years do not directly depend on each other because they are closed values, I will choose a clustered column chart.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;DateKey[Year]&lt;/strong&gt; column will appear on the &lt;strong&gt;X-axis&lt;/strong&gt;, and two measures will appear on the &lt;strong&gt;Y-axis&lt;/strong&gt;, which will calculate the required quantities from the model.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;[# Sum of Revenue from Pipeline] =&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[# Sum of Pipeline Potential],&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FILTER&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; &apos;Pipeline State&apos;[state_id] &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;, &apos;Pipeline State&apos;[state_id] = &lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;[# Profit of Pipeline] =&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[# Sum of Revenue from Pipepine] - [# Costs of Won Projects]&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The chart looks good. It visually shows the differences between individual years, and data labels explain the values of specific years. 
&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/Prepared Initial Chart.png&quot; alt=&quot;Initial Chart&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Initial chart&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Leave the selection of years to the user within the slicer.
&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/Slicer.png&quot; alt=&quot;Used Slicer&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Used slicer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let the fun begin! Now you have to fulfill the entry requirements.&lt;/p&gt;

&lt;h2 id=&quot;the-first-and-last-selected-year&quot;&gt;The first and last selected year&lt;/h2&gt;
&lt;p&gt;The requirement was that it should be possible to compare only the first and last selected years. Not just all in the selection. Remember what I said in the beginning? &lt;strong&gt;INDEX&lt;/strong&gt; can move through the specified view using the index:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1 = START&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;-1 = END&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all we need for this request.&lt;/p&gt;

&lt;p&gt;Let’s create a Calculation Group named &lt;strong&gt;“indexFormatCalculationGroup”&lt;/strong&gt;, where we will need two items:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ALL - Displays all selected years&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;First and Last - Displays values only for the first and last year of the selection&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choose their Order as you see fit, but I will set the ordinal for &lt;strong&gt;ALL to 0&lt;/strong&gt; and for First and Last to 1 so that it is easier to guide the user to the overall view by default.&lt;/p&gt;

&lt;p&gt;The item called &lt;strong&gt;“ALL”&lt;/strong&gt; is easy. We just let the calculation flow through it. Let’s leave the Format String Expression empty.
&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/calulationGroup.png&quot; alt=&quot;Calculation Group&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Expression of first calculation group&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First and Last is an item that should interest us. Within it, we will not focus on Format String Expression again. But let’s focus on Expression, where we have to build the calculation so that values are returned only if it is the first or last value in the selection.&lt;/p&gt;

&lt;p&gt;Our specified view is just the &lt;strong&gt;X-axis&lt;/strong&gt;, which determines the years for us, and given that we want the calculation to respect all &lt;strong&gt;SELECTED&lt;/strong&gt; years and not just one currently being evaluated or all of them, we have to work with the &lt;strong&gt;ALLSELECTED&lt;/strong&gt; function directed to &lt;strong&gt;DateKey[Year]&lt;/strong&gt; column.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt; &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt; = &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; DateKey[Year] &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This way, we will return only the selected period. DAX Guide (&lt;a href=&quot;https://dax.guide/index/&quot;&gt;INDEX – DAX Guide&lt;/a&gt;) The DAX Guide says in the INDEX definition that it has four optional parameters. Yes and no. The function requires that the &lt;strong&gt;ORDER&lt;/strong&gt; or &lt;strong&gt;RELATION&lt;/strong&gt; parameter be filled. They can easily be both when &lt;strong&gt;RELATION&lt;/strong&gt; is the specified view for him, and &lt;strong&gt;ORDER&lt;/strong&gt; allows you to define according to which column the input will be sorted. ORDER is defined through another new function called &lt;strong&gt;ORDERBY&lt;/strong&gt;, which default sorts input columns &lt;strong&gt;Ascending&lt;/strong&gt; (can be changed to &lt;strong&gt;DESC&lt;/strong&gt; – see &lt;a href=&quot;https://dax.guide/orderby/&quot;&gt;documentation&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But what needs to be said is that &lt;strong&gt;INDEX&lt;/strong&gt; returns a table with one row! With one column, such a result can be treated as just one value.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt; &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt; =&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; &lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;, _insertedTable, &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; DateKey[Year] &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt; &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt; =&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; &lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;, _insertedTable, &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; DateKey[Year] &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;“_last”&lt;/strong&gt; in this notation will return 2022 and &lt;strong&gt;“_first”&lt;/strong&gt; 2019. So it returns the same results, for example, &lt;strong&gt;MAXX(_insertedTable, [Year])&lt;/strong&gt; and &lt;strong&gt;MINX(_insertedTable, [Year])&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But now, you have to use the results and wrap them up in a simple calculation.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt; &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt; =&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; DateKey[Year] &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt; &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt; =&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; &lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;, &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; DateKey[Year] &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt; &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt; =&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; &lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;, &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; DateKey[Year] &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt; &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actualYear&lt;/span&gt; =&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; DateKey[Year] &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt; &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actualYear&lt;/span&gt; &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IN&lt;/span&gt; { &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;, &lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt; }, &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;BLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Let’s deploy the items created this way to Power BI and look at the results. Let’s start with the &lt;strong&gt;“ALL”&lt;/strong&gt; item. Everything looks the same, so good!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/firstCal.png&quot; alt=&quot;All Items Selected&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;ALL - item selected&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what about &lt;strong&gt;First and Last&lt;/strong&gt;? It works too! Excellent! So we can move on to the following requirement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/secondCal.png&quot; alt=&quot;First and Last - item selected&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;First and Last - item selected&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;interannual-changes&quot;&gt;Interannual changes&lt;/h2&gt;
&lt;p&gt;This is something that could be portrayed in different ways. For example, in a table, another similar chart, cards,… But all it would mean is that we would be distracting from the main chart we have created here. Could we display this additional information directly in the existing graph as part of the &lt;strong&gt;Data labels&lt;/strong&gt;? Then it would be an add-on that will complement the current information. That sounds good to me, so let’s give it a try.&lt;/p&gt;

&lt;p&gt;We need to reach for the calculation group again to edit the data labels while keeping the values as values and not converting them to text. It would be good to give the user the option to say whether he wants to see them or not and possibly in what form. This should direct us to use another new group, which will have the evaluation set only after the one we have already created. So, create a new one called “indexFormatCalculationGroup” with &lt;strong&gt;precedence 1&lt;/strong&gt;. Remember to set the previous calculation group &lt;strong&gt;precedence to 0&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/secondCal.png&quot; alt=&quot;Settings of indexFormatCalculationGroup&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Settings of indexFormatCalculationGroupd&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And let’s make three items in it. One that will not do anything so that it will be the same as in the previous &lt;strong&gt;“ALL,”&lt;/strong&gt; and two that will modify the data labels. Specifically, we could give the user a choice here whether they want the &lt;strong&gt;% difference&lt;/strong&gt; between each ascending year or the &lt;strong&gt;% difference&lt;/strong&gt; between the first and last year of the selection. Item names:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Without Additions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Change from first&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Change between&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/secondGroup.png&quot; alt=&quot;Created group indexFormatCalculationGroup with items&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Created group indexFormatCalculationGroup with items&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Like last time in the &lt;strong&gt;“Without Additions”&lt;/strong&gt; item, we will use &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt; in the Expression and do not specify anything in the Format String Expression. It is not necessary.&lt;/p&gt;

&lt;h2 id=&quot;change-from-first&quot;&gt;Change from first&lt;/h2&gt;
&lt;p&gt;Item &lt;strong&gt;“Change from First”&lt;/strong&gt; will be more interesting! Within Expression, the &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt; function will also suffice, but what about Selected Measure Format String? We have to do a similar calculation to the first calculation group! Take the result of the first year of selection and compare it with the last. Long live the &lt;strong&gt;INDEX&lt;/strong&gt;! After all… it’ll make it a lot easier for us.&lt;/p&gt;

&lt;p&gt;Let’s stop for a moment. Once we get that % difference, it doesn’t end there. The values we have used are numbers in themselves, not small. At the same time, these numbers are the main reason we go into this analysis. We should stick the obtained percentages to the existing values rather than overwrite them. So we need to combine the current Format String with the newly acquired percentages.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_divFormat&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_format&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#&amp;nbsp;%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&amp;nbsp;~&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_format&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CONCATENATEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_divFormat&lt;/span&gt;&amp;nbsp;},&amp;nbsp;[Value],&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The original Expression from “First and Last” modified this way should theoretically work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/incorrectChart.png&quot; alt=&quot;Wrong result in a chart&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Wrong result in a chart&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hmm, something needs to be fixed! Please take a look at the values in 2022. They don’t fit at all! The original values were &lt;strong&gt;[Revenue = 17 132 070]&lt;/strong&gt; and &lt;strong&gt;[Profit = 3 132 070]&lt;/strong&gt;, but the new values are &lt;strong&gt;[Revenue 1 713 207 00]&lt;/strong&gt; and &lt;strong&gt;[Profit = 313 207 000]&lt;/strong&gt;. The differences between the values are pronounced! Where our modified Format String is applied, there is a value shift equal to &lt;strong&gt;X*100&lt;/strong&gt;, this can be seen from &lt;strong&gt;Profit&lt;/strong&gt;, but another strange phenomenon can be seen in &lt;strong&gt;Revenue&lt;/strong&gt;! And the last three digits of the original value are now only 2. How is it possible?&lt;/p&gt;

&lt;p&gt;Everything is based on the format string and its manipulation. As part of the number definition, wildcards are used in its definition. For example, # for dynamically inserting numbers into a place and 0 for static, respectively, means that if there is a 0 in the string, its place will always be occupied by a number. If there are not enough digits, then the number 0 will come instead of this position. But it works so that this character is omitted if there are not enough numbers.&lt;/p&gt;

&lt;p&gt;Example:
&lt;strong&gt;10000.01&lt;/strong&gt; with different formats:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;#,,#.### = 10,000.01&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;#,,#.000 = 10,000.010&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But that’s still not all. Another element that “voluntarily” manipulates the output is the “%” sign, which, at the moment it is used, puts itself in the role of shifting the values so that, from its point of view, they are percentages. &lt;strong&gt;So X*100 &amp;amp; %.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These two issues lead me to think that if I have a 0 character in the resulting percentage, a number from the original value will be substituted for each zero. At the same time, the initial value will be adjusted to %. If only there were a way to prevent this… &lt;strong&gt;THERE IS! It is the character “\”.&lt;/strong&gt; If placed before any character in the Format string, the given character is treated as a real character, not a manipulator.&lt;/p&gt;

&lt;h2 id=&quot;change-from-the-first-update&quot;&gt;Change from the first Update&lt;/h2&gt;
&lt;p&gt;It is necessary to use the &lt;strong&gt;SUBSTITUTE&lt;/strong&gt; function on the result returned by the &lt;strong&gt;FORMAT&lt;/strong&gt; function and, in a way, comment out the characters that can cause problems!&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_divFormat&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_format&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#&amp;nbsp;%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_substitute&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUBSTITUTE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUBSTITUTE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_format&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;0&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;\0&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;%&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;\%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&amp;nbsp;~&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_substitute&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CONCATENATEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_divFormat&lt;/span&gt;&amp;nbsp;},&amp;nbsp;[Value],&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Expression modified. What about the chart?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/correctChart.png&quot; alt=&quot;Correct results &quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Correct results&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well great! It’s already looking good. We could add markers from the character map that tell straight away whether it is a positive or negative change.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;▲ – Positive&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;▼ – Negative&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;codebox&quot;&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_divFormat&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_last&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_first&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_upOrDown&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SWITCH&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;▲&amp;nbsp;&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;▼&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_format&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#&amp;nbsp;%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_substitute&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUBSTITUTE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUBSTITUTE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_format&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;0&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;\0&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;%&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;\%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&amp;nbsp;~&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_upOrDown&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_substitute&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CONCATENATEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_divFormat&lt;/span&gt;&amp;nbsp;},&amp;nbsp;[Value],&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/correctChartModified.png&quot; alt=&quot;Correct results with additional chars&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Correct results with additional chars&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Looks great! Even if we switch to &lt;strong&gt;“ALL”&lt;/strong&gt; in the first calculation group, everything works perfectly!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/correctChartModifiedAll.png&quot; alt=&quot;Correct results with &amp;quot;ALL&amp;quot; item selected.&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Correct results with “ALL” item selected.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have finished this item! Let’s go to the last one left.&lt;/p&gt;

&lt;h2 id=&quot;change-between&quot;&gt;Change between&lt;/h2&gt;
&lt;p&gt;The beginning will be the same! &lt;strong&gt;Expression = SELECTEDMEASURE()&lt;/strong&gt;, nothing wrong with that. What about the Format String Expression? After all, I already said in the introduction that the &lt;strong&gt;INDEX&lt;/strong&gt; only moves somewhat dynamically because it uses absolute coordinates within the provided view. The view can be narrowed down, for example, using the &lt;strong&gt;PARTITIONBY()&lt;/strong&gt; function (link to the &lt;a href=&quot;https://dax.guide/partitionby/&quot;&gt;documentation&lt;/a&gt;)), but we will need more here when we need to make a dynamic shift. It could help us when the user selects in the previous calculation group that it should again be the first and last year from the selection, but otherwise, not much. So let’s go back to the function I discussed in the &lt;a href=&quot;/offset-its-usage-calculation-groups&quot;&gt;previous article&lt;/a&gt;, the &lt;strong&gt;OFFSET()&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;The rest of the calculation will then be the same. We have to decide that if &lt;strong&gt;“ALL”&lt;/strong&gt; is selected in the first calculation group, then the &lt;strong&gt;OFFSET&lt;/strong&gt; option is used; otherwise, the &lt;strong&gt;INDEX&lt;/strong&gt; option is used to get the values into the &lt;strong&gt;“_prev”&lt;/strong&gt; variable. Calculation Items have their Order and names. Both can be used. Now, to simplify the entry, I will use the variant with Order, which I mentioned here in the second part of the article.&lt;/p&gt;

&lt;p&gt;This slight adjustment is more than enough for us! In short, if ALL is selected, then &lt;strong&gt;OFFSET&lt;/strong&gt; is evaluated; otherwise, &lt;strong&gt;INDEX&lt;/strong&gt; is evaluated. It is simple. The current value is also evident here because we can get it via &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt; into the &lt;strong&gt;“_actual”&lt;/strong&gt; variable. &lt;strong&gt;If it occurs to you that we could have done this for the previous item as well, i.e., replace the “_last” parameter, then, of course, you are right!&lt;/strong&gt; However, even there, it would be enough to use &lt;strong&gt;SELECTEMEASURE()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So the entire Expression could look like this, for example:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INDEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ORDERBY&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;indexCalculationGroup[Ordinal]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_insertedTable&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_divFormat&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lastYear&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Year]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_upOrDown&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SWITCH&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;▲&amp;nbsp;&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;▼&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_format&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_div&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#&amp;nbsp;%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_substitute&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUBSTITUTE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUBSTITUTE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_format&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;0&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;\0&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;%&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;\%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&amp;nbsp;~&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_upOrDown&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_substitute&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CONCATENATEX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_divFormat&lt;/span&gt;&amp;nbsp;},&amp;nbsp;[Value],&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;&amp;nbsp;&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Even our chart thinks so!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/changeBetween.png&quot; alt=&quot;Active change between with &amp;quot;ALL&amp;quot; item&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Active change between with “ALL” item&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/INDEX as a friend for Conditional Format Strings/changeBetweenFirstAndLast.png&quot; alt=&quot;Active change between with &amp;quot;First and Last&amp;quot; item&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Active change between with “First and Last” item&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I skipped a step! What? The fact that I would let this item be realized using &lt;strong&gt;OFFSET&lt;/strong&gt; only. I said it wasn’t the best idea and bypassed it with an index. If we left it all on &lt;strong&gt;OFFSET&lt;/strong&gt;, we would have to ensure that only YEARS with values come into its input table. When “First and Last” is selected, only the years &lt;strong&gt;2019 and 2022&lt;/strong&gt; are included in the calculation, and the years &lt;strong&gt;2020 and 2021 are not affected&lt;/strong&gt;. Which, at this point, would be much more complicated than just skipping it and letting &lt;strong&gt;INDEX&lt;/strong&gt; do its job. And that he does a great job!&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Don’t underestimate a feature because you don’t immediately see its use. Sometimes you can’t see the forest through the chips.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will not be avoiding the INDEX function because, from my point of view, it is exquisite and accurate. But, at the same time, its use will be much more, not only in the direction of formatting. But somewhere, you will start with it, understand how it works, and apply it further. So I hope this article helped you understand at least one possible scenario of its use.&lt;/p&gt;

&lt;p&gt;Great articles about these new functions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pbidax.wordpress.com/2022/12/15/introducing-dax-window-functions-part-1/&quot;&gt;Introducing DAX Window Functions (Part 1) – pbidax (wordpress.com)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pbidax.wordpress.com/2022/12/23/introducing-dax-window-functions-part-2/&quot;&gt;INTRODUCING DAX WINDOW FUNCTIONS (PART 2) – pbidax (wordpress.com)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://data-marc.com/2022/09/21/how-offset-in-dax-will-make-your-life-easier/&quot;&gt;How OFFSET in DAX will make your life easier – Data – Marc (data-marc.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Thu, 29 Dec 2022 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/index-as-a-friend-for-conditional-format-string</link>
                <guid isPermaLink="true">http://localhost:4000/index-as-a-friend-for-conditional-format-string</guid>
                
                <category>dax</category>
                
                <category>calculation_groups</category>
                
                <category>format_string</category>
                
                <category>conditional_formatting</category>
                
                <category>index</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;The DAX OFFSET function has been talked about for a while now. The main entry point to this function for almost everyone was the article by &lt;a href=&quot;https://www.linkedin.com/in/marclelijveld/&quot;&gt;Marc Lelijveld&lt;/a&gt; - &lt;a href=&quot;https://data-marc.com/2022/09/21/how-offset-in-dax-will-make-your-life-easier/&quot;&gt;How to OFFSET in DAX would make your life easier&lt;/a&gt;. He describes all the essential info about it in his article. And today, it was officially released as a part of the latest update! https://powerbi.microsoft.com/en-us/blog/power-bi-december-2022-feature-summary/&lt;/p&gt;

&lt;p&gt;Function targets the ability to shift over the input dimension along the Y-axis or its rows. Both upwards and downwards. But how exactly it works is explained by &lt;a href=&quot;https://www.linkedin.com/in/tommartens68/&quot;&gt;Thomas Martens&lt;/a&gt; in this his article: &lt;a href=&quot;https://www.minceddata.info/2022/12/14/unlock-an-ample-new-world-by-seeing-through-a-window/&quot;&gt;Unlock an ample new world by seeing through a window&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Such shifts are practical in many cases, for example, in period-over-period calculations, near points calculations, etc. And indeed, it can be used to calculate fundamental values from cumulations.&lt;/p&gt;

&lt;p&gt;So if I stick to the idea, &lt;strong&gt;I would like to calculate the original values from the cumulated ones.&lt;/strong&gt; It would be worth considering how many columns we would like to convert this way and if it would be worth reaching for something like calculation groups.&lt;/p&gt;

&lt;p&gt;Typically, we would instead solve the problem in reverse. From the source data, we would do cumulation or prepare a breakdown of values already in &lt;strong&gt;Power Query&lt;/strong&gt; or any transformation activity we would use. However, we do not have this option this time. Because we got a &lt;strong&gt;PBIX&lt;/strong&gt; file attached to such data, we don’t have access to solve it elsewhere.&lt;/p&gt;

&lt;h2 id=&quot;demo-data-and-targeting-the-first-column&quot;&gt;Demo data and targeting the first column&lt;/h2&gt;
&lt;p&gt;The data looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/demoData.png&quot; alt=&quot;Demo Data&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;The table that is used for the demonstration of OFFSET&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So we have a simple table that contains the Date, number of units sold, revenue, and margin. All cumulated over one year and related to the first day of the month. Of course, it would be possible to break down such a table without the &lt;strong&gt;OFFSET&lt;/strong&gt; function, but why not use it? When it’s new. It may save us much time.&lt;/p&gt;

&lt;p&gt;Let’s start easy. So we will start by redoing the entire table at once, but we will start with one column, &lt;strong&gt;[Sold Quantity]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/selectedSoldQuantity.png&quot; alt=&quot;Selected Quantity&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Highlighted cumulated column - Sold Quantity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Therefore, it is necessary to take each value within this column and subtract from it the previous value, i.e., &lt;strong&gt;ROW-1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/base.png&quot; alt=&quot;Basic caclulation&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Basic offset calculation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s the only bit of theory needed for this. So that the intended problem can be shown well, I will put the original values in the combined graph at the level of the lines. After all, these values represent cumulation, so the individual points have a relationship between them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/cumulatedQuantity.png&quot; alt=&quot;Cumulated Quantity&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Cumulated Quantity as a line chart&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In Show as a Table, where you can get to via the three dots on the visual, you can find specific values displayed for individual points in the graph.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/cumulatedQuantityWithDetail.png&quot; alt=&quot;Cumulated Quantity with detail table&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Cumulated Quantity chart - Show as a Table&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This display is reasonably practical when working with the &lt;strong&gt;OFFSET&lt;/strong&gt; function because you can see the outputs &lt;strong&gt;immediately&lt;/strong&gt; and don’t have to search for individual values.&lt;/p&gt;

&lt;p&gt;I now have the data sorted, so I don’t have to manipulate the data anymore, even though the other new features were mentioned in the &lt;a href=&quot;https://powerbinextstep.com/&quot;&gt;Power BI Next Step&lt;/a&gt; and then again in the article. ( &lt;strong&gt;ORDERBY()&lt;/strong&gt; function ) In any case, it is enough to prepare a measure that tells exactly what it should do via the first two parameters of the &lt;strong&gt;OFFSET&lt;/strong&gt; function.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;
Quantity&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Sold&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Sold&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Date]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This measure works very well in the chart. It quickly loops through the values on a line, makes their differences, and displays the result within columns. If we then played with this graph a little, those columns could explain beautifully why &lt;strong&gt;there was or was not an increase within the cumulative line.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/resultingQuantity.png&quot; alt=&quot;Result of Offseted Quantity&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Result of Offseted Quantity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That was easy. So let’s make it closer to a common scenario. Let’s add another table to the game. Specifically, the &lt;strong&gt;DateKey&lt;/strong&gt; table holds individual days for the year &lt;strong&gt;2022&lt;/strong&gt; and has the [Date], [Year], and [Month] columns. This table is connected to our original &lt;strong&gt;cData table&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/relationShip.png&quot; alt=&quot;DateKey table in a model&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;DateKey table added to the model&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have modified the &lt;strong&gt;ALLSELECTED&lt;/strong&gt; function in measure to &lt;strong&gt;DateKey[Date]&lt;/strong&gt; and switched the source on the &lt;strong&gt;X-axis&lt;/strong&gt; to the same column as &lt;strong&gt;DateKey&lt;/strong&gt;. Result?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/sonarChart.png&quot; alt=&quot;Sonar Chart&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Wrong resulted chart after ALLSELECTED modification&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;fixing-broken-result&quot;&gt;Fixing broken result&lt;/h2&gt;
&lt;p&gt;Well… &lt;strong&gt;That doesn’t look good. How is it possible?&lt;/strong&gt; By changing &lt;strong&gt;ALLSELECTED&lt;/strong&gt; in &lt;strong&gt;OFFSET&lt;/strong&gt;, the measure must try to be executed for all values in the new input dimension and where empty outputs are discarded. &lt;strong&gt;But now “-1” means that on the second day of the month, the value from the first day is taken and subtracted from nothing.&lt;/strong&gt; That is the reason why we get a negative return out of nowhere.&lt;/p&gt;

&lt;p&gt;At the same time, it is great to see it in &lt;strong&gt;Show as a Table&lt;/strong&gt; within the visual.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/sonarValues.png&quot; alt=&quot;Sonar Values&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Values of broken chart&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will not get very far even if we filter out data from the output when &lt;strong&gt;“_actual”&lt;/strong&gt; returns an empty value to show the difference accordingly. So that’s how it should work, but to be sure, let’s try it by adding this condition:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;
Quantity&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Sold&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Sold&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Date]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISBLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;BLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;And really… &lt;strong&gt;It is even worse.&lt;/strong&gt; Now it only shows &lt;strong&gt;“_actual”&lt;/strong&gt; because when &lt;strong&gt;“_prev”&lt;/strong&gt; would return values, &lt;strong&gt;“_actual”&lt;/strong&gt; is &lt;strong&gt;BLANK&lt;/strong&gt; value every time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/debuggingSonarCHart.png&quot; alt=&quot;Debugging Sonar Chart&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Debugging wrong results in chart&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is necessary to look at this issue a little differently. First, we know that the shift occurs directly after the entered row within &lt;strong&gt;OFFSET&lt;/strong&gt;. In the second row, we should make such a shift if and only if &lt;strong&gt;“_actual”&lt;/strong&gt; contains values. These two entry requirements must be met for it to make sense. Fortunately, we have captured the second one from the last test using the IF function. Still, how to define a set for displacement? One such possibility is through the intersection of sets. Take the values from &lt;strong&gt;DateKey[Date]&lt;/strong&gt; and &lt;strong&gt;cData[Date]&lt;/strong&gt; and use the &lt;strong&gt;INTERSECT&lt;/strong&gt; function to return only their intersection. So let’s try it out.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;
Quantity&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Sold&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Sold&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATETABLE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INTERSECT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Date]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Date]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;REMOVEFILTERS&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Date]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISBLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;BLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/workingChart.png&quot; alt=&quot;Working chart&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Once again chart is working as we expect.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hurrah!&lt;/strong&gt; It works again, and we can move on to the next challenge. How to use it dynamically, so we don’t have to create this function for every possible column. I can already hear the &lt;strong&gt;Calculation Group&lt;/strong&gt; calling in the distance.&lt;/p&gt;

&lt;h2 id=&quot;calculation-groups-with-offset&quot;&gt;Calculation groups with OFFSET&lt;/h2&gt;
&lt;p&gt;From all the columns, I made a simple aggregation measure &lt;strong&gt;”= SUM(cData[…])”&lt;/strong&gt; and put them together with the Date from the DateKey into the matrix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/cumulatedValues.png&quot; alt=&quot;Cumulated Values&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Cumulated values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can point a calculation group at them with an item that would modify the existing measures using the modified measure we produced a little while ago, with a slight change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/calulcationGroup.png&quot; alt=&quot;Calculation Group&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Prepared Calculation Group&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After activating this item against this matrix, everything looks good. Each column in the matrix was overwritten and immediately subtracted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/SubstructedValues.png&quot; alt=&quot;Substracted values&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Substracted values&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cool!&lt;/strong&gt; I wanted to let you know that it works. Dynamic value difference thanks to the combination of &lt;strong&gt;OFFSET&lt;/strong&gt; function and &lt;strong&gt;Calculation Group&lt;/strong&gt;. But… What if we wanted to modify the Format String for the values thus obtained? It should work the same.&lt;/p&gt;

&lt;h2 id=&quot;format-string-expression-with-offset&quot;&gt;Format String Expression with OFFSET&lt;/h2&gt;
&lt;p&gt;A minor modification to the existing solution adds a simple smiley that should appear if the value exceeds &lt;strong&gt;50&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;
&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;-1&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATETABLE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INTERSECT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Date]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;cData[Date]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;REMOVEFILTERS&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;DateKey[Date]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISBLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;BLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_actual&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prev&lt;/span&gt;&amp;nbsp;&amp;gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;50&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;😍&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#.0&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/smileMatrix.png&quot; alt=&quot;Smile matrix&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Smile matrix&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What?&lt;/strong&gt; So there’s something wrong here. The smiley appears at first glance very randomly. It doesn’t matter if the result is &lt;strong&gt;&amp;gt;50&lt;/strong&gt; or not. At least, it seems that way.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/applicationOfLogic.png&quot; alt=&quot;Logic behind calculation&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Expected logic behind calculation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even this simple verification confirms that the result returned to us will be for some other inputs than we would expect because the smiley should also appear at place &lt;strong&gt;61.25&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But what if there was a dependent evaluation? The Expression would calculate the first OFFSET shift, and the Format String Expression would then calculate the second shift, which would already be over the calculated values. Wouldn’t it work, then?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/secondaryMovement.png&quot; alt=&quot;Secondary OFFSET movement&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Secondary OFFSET movement&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And really! Format String Expression counts values up to the values returned from the Expression, but they are shifted and subtracted, so we are comparing sets that we did not want to compare. To achieve our goal, we would like to directly compare the values output from the Expression.&lt;/p&gt;

&lt;p&gt;So it should be enough to use &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt;, which accepts the current value from the shift performed by the Expression.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;
&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;50&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;😍&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/resultMatrix.png&quot; alt=&quot;Result matrix&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Result matrix with emojies&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It works like that!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/mind-blowing.png&quot; alt=&quot;Mind blowing&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What if we try to take it to the last level for now? Could you make it attractive with conditional formatting?&lt;/p&gt;

&lt;p&gt;##Conditional Formatting by Calculation Group and &lt;strong&gt;OFFSET&lt;/strong&gt;
Would it work to turn it around? First, we would leave the value output at the beginning. Otherwise, we would let the &lt;strong&gt;Calculation Group&lt;/strong&gt; return only the &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt; itself in the Expression to leave the data in its original form. Still, we would like to add the identifier of the change within the Format String.&lt;/p&gt;

&lt;p&gt;We have a line chart that shows the evolution of our cumulation. &lt;strong&gt;We want to calculate the % increases between individual points on it and show either an increase compared to the previous % value or a decrease.&lt;/strong&gt; So, to find out if the cumulative trend is generally increasing or stagnant in places or decreasing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/calculationGroupFormatting.png&quot; alt=&quot;Offset - Format String Expression&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Offset - Format String Expression&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To show this, I’ll show this against the measure named &lt;strong&gt;[# Sum of Quantity]&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Offset Its usage with calculation groups/formattedLineChart.png&quot; alt=&quot;Formatted line chart&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Formatted line chart&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Wherever there is more than a &lt;strong&gt;50%&lt;/strong&gt; increase between unit results,”▲” is displayed where there is a decrease, and “▼” otherwise no added character is displayed.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This OFFSET is a great function that can make many calculations more straightforward, but it can also mess things up very quickly. I hope this article has helped you understand more about how OFFSET works and how it can be used for different purposes. &lt;strong&gt;Please be careful WHERE you will use it. Because it also creates lots of questions.&lt;/strong&gt;&lt;/p&gt;
</description>
                <pubDate>Tue, 13 Dec 2022 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/offset-its-usage-calculation-groups</link>
                <guid isPermaLink="true">http://localhost:4000/offset-its-usage-calculation-groups</guid>
                
                <category>dax</category>
                
                <category>calculation_groups</category>
                
                <category>format_string</category>
                
                <category>conditional_formatting</category>
                
                <category>offset</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;Months ago, we got the integration between the Power BI and the Sharepoint lists, respectively, between Microsoft Lists. &lt;a href=&quot;https://learn.microsoft.com/en-us/power-bi/admin/service-admin-portal-integration#integration-with-sharepoint-and-microsoft-lists?id=DP-MVP-5003801&quot;&gt;(Integration Setup in Power BI Admin Portal)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This integration adds a button to Sharepoint lists that allows you to use that lists as a data source from which a dataset is automatically created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/sharepoint-integration-button.png&quot; alt=&quot;Integration button in Sharepoint Lists&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Integration button in Sharepoint Lists&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This integration was gradually expanded because Power BI will try to create an automatic report from the given sheet in addition to the dataset. This is efficient when we need to reveal the basic information about the values in the sheet, or we need more time to create a report ourselves, and we need some overview that we can customize according to our wishes.&lt;/p&gt;

&lt;p&gt;I used this Sharepoint List for the demonstration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/list-with-demo-data.png&quot; alt=&quot;List with demo data&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;List with demo data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The following report was automatically generated from it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/autogenerated-report.png&quot; alt=&quot;Autogenerated report&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Auto-generated report from demo data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the report, as I already mentioned, we can make adjustments. But, at the same time, you only need to select another field, and the existing generated report will be automatically expanded.&lt;/p&gt;

&lt;p&gt;The official documentation &lt;a href=&quot;https://learn.microsoft.com/en-us/power-bi/create-reports/service-quick-create-sharepoint-list?id=DP-MVP-5003801&quot;&gt;HERE&lt;/a&gt; shows all the fundamental limits and descriptions of the behavior.&lt;/p&gt;

&lt;h2 id=&quot;limiting-who-can-use-this-integration&quot;&gt;Limiting who can use this integration&lt;/h2&gt;
&lt;p&gt;Like many other settings in the Power BI Admin portal, this integration can be set so that everyone can use it or only limited security groups (or certain groups are not allowed to use it).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/integration-shp-pbis.png&quot; alt=&quot;Power BI Admin Portal settings&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Power BI Admin Portal settings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The exact recommended setting will always depend on the company’s internal policies. If this integration is disabled, Power BI should not be displayed in the integrations at all for List. However, if someone tries to use that integration, for example, in the interim when it is being deactivated, they will be greeted with this message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/returned-error.png&quot; alt=&quot;Returned Error&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;The error returned by Power BI after deactivating this integration.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In any case, unauthorized users will not be able to use the integration. But those who do can use it for every single sheet. Which also may not be desirable in any way. However, there are no settings for individual sheets in the &lt;strong&gt;Power BI Admin Portal&lt;/strong&gt;. Can we restrict it like this? (Short Answer: &lt;em&gt;YES&lt;/em&gt;, Longer Answer: &lt;em&gt;YEEEEEEEEEES&lt;/em&gt;! (Citation of &lt;a href=&quot;https://twitter.com/Will_MI77&quot;&gt;Will Thompson (@MI77@mastodon.online) (@Will_MI77) / Twitter at Power BI Next Steps&lt;/a&gt;))&lt;/p&gt;

&lt;h2 id=&quot;sheet-level-integration-settings&quot;&gt;Sheet-level integration settings&lt;/h2&gt;
&lt;p&gt;The idea for this solution comes from &lt;a href=&quot;https://www.linkedin.com/in/michelcarlo/&quot;&gt;Michel Mendes&lt;/a&gt;. In one of his last posts, he talked about the fact that within the &lt;strong&gt;JSON&lt;/strong&gt; definition of the layout, it is also possible to influence the buttons located above the List. Specifically, he showed it using the &lt;strong&gt;NEW&lt;/strong&gt; and &lt;strong&gt;UPLOAD&lt;/strong&gt; buttons as an example. &lt;a href=&quot;https://michelcarlo.com/2022/11/19/hiding-the-new-and-upload-buttons-from-a-sharepoint-library-using-json-list-formatting/&quot;&gt;Hiding the New and Upload buttons from a SharePoint document library using JSON list formatting - michelcarlo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This piqued my curiosity as to whether it would be possible to hide the integration button with a similar variant, either entirely or only its subsections &lt;em&gt;(for example, make ONLY Power BI disappear).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As Michel mentioned, &lt;strong&gt;“commandBarProps”&lt;/strong&gt; a beautiful definition of objects, can be modified within the upcoming &lt;strong&gt;JSON structure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This led to the preparation of the first script. That makes the whole Integrate button disappear:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$schema&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://developer.microsoft.com/json-schemas/sp/v2/row-formatting.schema.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;commandBarProps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integrate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;hide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How would you like to use such a code? First, it needs to be applied to a new or existing view. We can do this, for example, via &lt;strong&gt;All items&lt;/strong&gt; (&lt;em&gt;Or another name of the view that is set as a default view&lt;/em&gt;) &lt;strong&gt;-&amp;gt; Format Current view&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/format-current-view.png&quot; alt=&quot;Formatting for view in Sharepoint list.&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Formatting for view in Sharepoint list.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But this will natively show you the basic options for formatting or altering lines. But at the bottom of this window, you can find &lt;strong&gt;“Advanced mode”&lt;/strong&gt; which is often coded in Microsoft technologies &lt;em&gt;(for example, in Power Query)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/settings-of-format.png&quot; alt=&quot;Advanced mode to open JSON specification of the layout&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Advanced mode to open JSON specification of the layout.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here we can test the embedded code using Preview and see if it does exactly what you would expect from it. In our case, it makes the Integrate button disappear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/advanced-design-mode.png&quot; alt=&quot;Preview of inserted JSON.&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Preview of inserted JSON.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But then came a minor epiphany. If we let the entire button be hidden, then even &lt;strong&gt;Power Apps&lt;/strong&gt; or &lt;strong&gt;Power Automate&lt;/strong&gt; cannot be invoked in this way. This would only make the disappearing scope even narrower:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$schema&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://developer.microsoft.com/json-schemas/sp/v2/row-formatting.schema.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;commandBarProps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;powerBI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;hide&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The difference between these scripts is only in the &lt;strong&gt;“key”&lt;/strong&gt; attribute, which determines the object to which we will refer. Since we only want to make it disappear, the attribute &lt;strong&gt;“hide”&lt;/strong&gt; with the value remains.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Restrict Power BI Integration Button in Microsoft Lists/restricted-integration.png&quot; alt=&quot;Sharepoint List - Integrate button without Power BI&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Sharepoint List - Integrate button without Power BI&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the Integrate button is shown but without Power BI. &lt;strong&gt;Hurrah!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;If you save such a setting within the “All items” view or the user’s native view, you will be sure that the user will not click on this option at first. So, YES, it is NOT a SECURITY option. It is an OPTICAL variant. Therefore, a user authorized to use the integration and can create his views within the sheet may be able to reaccess this integration, especially when these layouts are kept from views.&lt;/p&gt;

&lt;p&gt;Anyway, it’s great that there are options to keep some of this thread hidden from regular users if needed. After all… If something can only be seen in certain places or specific situations, it will appear to the average user that it is “useful” only in specific cases.&lt;/p&gt;
</description>
                <pubDate>Sun, 20 Nov 2022 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/restrict-power-bi-integration-button-microsoft-lists</link>
                <guid isPermaLink="true">http://localhost:4000/restrict-power-bi-integration-button-microsoft-lists</guid>
                
                <category>integration</category>
                
                <category>service</category>
                
                <category>admin</category>
                
                <category>sharepoint</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;I presented this topic to the &lt;a href=&quot;https://www.pbiusergroup.com/communities/community-home?CommunityKey=e6e66122-e621-4bba-8adb-17fb68b9c419&quot;&gt;Iowa Power BI User Group&lt;/a&gt; (Their &lt;a href=&quot;https://www.meetup.com/IowaPowerBI/&quot;&gt;Meetup&lt;/a&gt;), and the entire recording can be viewed here:&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/RfsVPeot-r8&quot; loading=&quot;lazy&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&quot;links-that-are-mentioned-in-video&quot;&gt;Links that are mentioned in video&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/rest/api/power-bi/datasets/get-dataset?id=DP-MVP-5003801&quot;&gt;Datasets - Get Dataset&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tirnovar/Power-BI-Admin-REST-API-Connector&quot;&gt;Power BI Admin REST API Connector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tirnovar/Power_BI_REST_API_PQ/blob/main/Power%20BI%20Service%20Token/get-BearerToken.pq&quot;&gt;get-BearerToken - Custom Power Query function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.crossjoin.co.uk/2019/01/13/power-bi-data-privacy-cloud-web-data-sources/&quot;&gt;Chris Webb - Power BI Data Privacy Levels And Cloud /Web-Based Data Sources Or Dataflows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;power-query-codes-from-video&quot;&gt;Power Query codes from video&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Get Token:&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/tirnovar/05edecf93fb62677040fc3e6a60246e0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Datasets from selected Group:&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/tirnovar/0010bb1b1f86cf35f93a97c8d87f9f73.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Datasets from selected Group - Table generation:&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/tirnovar/d11bc103e5151e5827769e8942e45818.js&quot;&gt;&lt;/script&gt;

</description>
                <pubDate>Wed, 09 Nov 2022 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/power-query-vs-power-bi-rest-api</link>
                <guid isPermaLink="true">http://localhost:4000/power-query-vs-power-bi-rest-api</guid>
                
                <category>m</category>
                
                <category>power_query</category>
                
                <category>rest_api</category>
                
                <category>admin</category>
                
                <category>azure</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;Almost a year ago, I asked on &lt;strong&gt;Twitter&lt;/strong&gt; what color format you use in &lt;strong&gt;Power BI&lt;/strong&gt;. The results from that question weren’t all that surprising.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/results.png&quot; alt=&quot;Twitter poll results&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Twitter poll results&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt; Because almost everyone knows the &lt;strong&gt;HEX&lt;/strong&gt; code, and we use it very often, it is easy to write, and most systems require it to define a color. Next, the &lt;strong&gt;RGB / RGBA&lt;/strong&gt; code and name definition of the color were placed. However, &lt;strong&gt;HSL&lt;/strong&gt; or the &lt;strong&gt;HSV&lt;/strong&gt; alternative only appeared a little in the answers. For that reason, I am introducing you to this color notation and showing you how practical it can be.&lt;/p&gt;

&lt;h2 id=&quot;intro-to-hsl-color-code&quot;&gt;Intro to HSL color code&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;HSL&lt;/strong&gt; and &lt;strong&gt;HSV&lt;/strong&gt; color code is based on the Hue of the color, which is defined by the rotation along the color axis. So it starts at &lt;strong&gt;0°&lt;/strong&gt; and ends at &lt;strong&gt;360°&lt;/strong&gt;. In both cases, it is red, according to the following image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/colorradio.png&quot; alt=&quot;Color Ratio&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Color Ratio&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, color saturation essentially defines color as its brightness. These are the parts that &lt;strong&gt;HSL&lt;/strong&gt; and &lt;strong&gt;HVS&lt;/strong&gt; have in common. These color definitions then differ in the final letter, which in HSL or &lt;strong&gt;L means Lightness&lt;/strong&gt;, and in HSV or &lt;strong&gt;V means Value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I work more often, even in my imagination, with the &lt;strong&gt;HSL&lt;/strong&gt; variant because the &lt;strong&gt;higher the Lightness&lt;/strong&gt; value I set &lt;em&gt;(up to 100 %)&lt;/em&gt;, &lt;strong&gt;the more the color will fade&lt;/strong&gt; and come &lt;strong&gt;closer to white&lt;/strong&gt;. This can also be seen quite well in the following picture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/colorCilinder.png&quot; alt=&quot;Color cilinder&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Color cilinder&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;hsl-in-power-bi&quot;&gt;HSL in Power BI&lt;/h2&gt;
&lt;p&gt;As already mentioned, Power BI supports many color formats, but you must know how to pass them to the background algorithm. So, if you ever want to use it, &lt;strong&gt;HSL&lt;/strong&gt;, like other formats, is passed as text, so in double quotes and the inner part of the text looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/hslInPowerBI.png&quot; alt=&quot;Format definition&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Format definition&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This notation results in this color:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/resultColor.png&quot; alt=&quot;Result color&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Result color&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Its &lt;strong&gt;HEX&lt;/strong&gt; code would be &lt;strong&gt;“#4EADCA”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using HSL only for the definition of one color would indeed be pointless, even from the point of view of writing the necessary characters. However, the beauty of this coding (at least for me) is that it is enough to define the base color using HS and L to be used only and only for its modification. So, for example, for GRADIENT.&lt;/p&gt;

&lt;h2 id=&quot;the-gradient-in-power-bi&quot;&gt;The gradient in Power BI&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Single-color&lt;/strong&gt; or &lt;strong&gt;Double-color&lt;/strong&gt; gradient is natively supported as part of conditional formatting, for example, for the color of columns in a bar chart or the background of a column within a &lt;strong&gt;matrix&lt;/strong&gt;. At that moment, Power BI recalculates the individual points in the chart and distributes the color among the selected ones. &lt;em&gt;(From the color of the Highest value to the color of the Lowest value)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/GradientSetup.png&quot; alt=&quot;Gradient settings&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Gradient settings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is something we can arrange ourselves in the code. It doesn’t matter what color code we choose for it because it will only be the one that works best for us. As I mentioned before, &lt;strong&gt;HSL suits me very well for this purpose.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;single-color-gradient-by-hsl&quot;&gt;Single-color gradient by HSL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Power BI UI doesn’t accept HSL encoding, and so…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/pbiColorUI.png&quot; alt=&quot;Power BI Color selecting UI&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Power BI Color selecting UI&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;strong&gt;UI&lt;/strong&gt; doesn’t help, &lt;strong&gt;DAX&lt;/strong&gt; has to come into play. Let’s say we’re trying to get the following result, but &lt;strong&gt;DAX&lt;/strong&gt; will calculate the color:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/nativeGradient.png&quot; alt=&quot;Native gradient&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Native gradient&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To get to that, we need to know the model we will demonstrate. In this case, we only have two tables. Dimension &lt;strong&gt;“priceList”&lt;/strong&gt; and Fact Table &lt;strong&gt;“Sales.”&lt;/strong&gt; Between them is a &lt;strong&gt;1:*&lt;/strong&gt; relation over the &lt;strong&gt;[id]&lt;/strong&gt; and &lt;strong&gt;[idProduct]&lt;/strong&gt; columns.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/relationShips.png&quot; alt=&quot;Relationships&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Relationships&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I will create a matrix from these tables representing the basis on which we will place the gradient we wrote.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/calculation.png&quot; alt=&quot;Description of calculation&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Description of calculation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A minor consideration before we even start creating the gradient. Gradients can be implemented in different ways. But mostly, we need to think about what we are trying to say with it. Because we only sometimes want to highlight all values. Sometimes we only need the first ten values, those above the media, or the percentile 50. Likewise, sometimes we can get to a variant where we don’t even want to solve the percentile distribution but everything above the average. In the same way, you may want to “just” use color to show that the results are decreasing and not to decide by how much.&lt;/p&gt;

&lt;p&gt;So we have many options. Let’s try to create one of them. &lt;strong&gt;Which one? The last one!&lt;/strong&gt; That is when we don’t decide how much there was a decrease or increase, but when we have to sort all the results and find out how much the current value is, to assign it to color in the fading spectrum according to this order.&lt;/p&gt;

&lt;p&gt;So the first thing we’ll start with is choosing our starting color, which will lighten up to completely white. It will be the color with the HEX code &lt;strong&gt;“#FFAC00”&lt;/strong&gt;. For example, I will convert the color using this converter: &lt;a href=&quot;https://convertingcolors.com/hex-color-FFAC00.html?search=#FFAC00&quot;&gt;LINK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The output of the conversion will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/convertedOutputs.png&quot; alt=&quot;Converter output&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Converter output&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We need to wrap in the previously mentioned format: &lt;strong&gt;“hsl(40,100%,50%)”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I can start using it right away in Power BI. But to check it, I’ll create a measure called &lt;strong&gt;“Single-Color Gradient.”&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;Single-Color&amp;nbsp;Gradient&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_initColor&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;hsl(40,100%,50%)&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_initColor&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If I place this measure in the mentioned matrix and set the conditional formatting of the &lt;strong&gt;[Quantity Sold]&lt;/strong&gt; column to be based on this measure, the result will look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/hslInMatrix.png&quot; alt=&quot;Color by HSL format in Matrix&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Color by HSL format in Matrix&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I see that each line contains the same value, and the &lt;strong&gt;“orange”&lt;/strong&gt; one is rendered as a background very well, even from the HSL color code. So we can start from that. Also, I will leave the column showing the results in the matrix for easier understanding. What is necessary now is to add a calculation that returns a value between 0% &lt;em&gt;(respectively 50%)&lt;/em&gt; and 100% for lightness to let the color fade to white.&lt;/p&gt;

&lt;p&gt;To follow the mentioned scenario for the gradient, I reach for a function that can return the order of the elements based on their results for the given set. As you probably guessed correctly, I’m talking about the &lt;a href=&quot;https://learn.microsoft.com/en-gb/dax/rankx-function-dax?id=DP-MVP-5003801&quot;&gt;RANKX()&lt;/a&gt; function.&lt;/p&gt;

&lt;p&gt;How do you think you could use it? Well, from the point of view of the procedure, you need to know some essential data we need for the calculation.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Initial lightness&lt;/li&gt;
  &lt;li&gt;The total number of rows of the matrix&lt;/li&gt;
  &lt;li&gt;The value of each row&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to get them? Point No. 1 is clear. We already have that one. To get the answer to point #2, we can use &lt;strong&gt;COUTROWS()&lt;/strong&gt; directed at the &lt;strong&gt;“priceList”&lt;/strong&gt; dimension. Finally, point No. 3 can be obtained by &lt;strong&gt;ADDCOLUMNS()&lt;/strong&gt;. The result of this &lt;strong&gt;ADDCOLUMNS()&lt;/strong&gt; is something on which we can use our &lt;strong&gt;RANKX()&lt;/strong&gt; function to return ranks on calculated results. These results are usable as multiplicators for… let’s call it as LightnessMover, shall we? It is a value calculated like a subtraction &lt;strong&gt;between maximal potential lightness (100) and the original lightness of our selected color (50), divided by the count of rows in the matrix.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After a bit of modification, the function will look like this:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;Single-Color&amp;nbsp;Gradient&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedValue&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;priceList&apos;[Id]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_inputTable&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATETABLE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;DISTINCT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;priceList&apos;[id]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;priceList&apos;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_counter&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;COUNTROWS&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_inputTable&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_rankOfRow&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;MINX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ADDCOLUMNS&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_inputTable&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;@rank&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RANKX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;priceList&apos;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;[#&amp;nbsp;Sum&amp;nbsp;Of&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,,&amp;nbsp;DESC&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;[Id]&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedValue&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;[@rank]&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightness&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_initialLightness&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0.5&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_maxLightness&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightnessMover&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_maxLightness&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_initialLightness&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_counter&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_initialLightness&lt;/span&gt;&amp;nbsp;+&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightnessMover&lt;/span&gt;&amp;nbsp;*&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_rankOfRow&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_colorDefinition&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_hue&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;40&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_saturation&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;hsl(&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_hue&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;,&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_saturation&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;%,&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightness&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_colorDefinition&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Result matrix:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/customSingleColorGradient.png&quot; alt=&quot;Custom single color gradient&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Custom single color gradient&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Cool, isn’t it? But do you know what would be even more fabulous? If we could make it more dynamic, we wouldn’t need to reference exact measures inside that &lt;strong&gt;RANKX&lt;/strong&gt;. Luckily we can use this expression also in Calculation Groups with &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;multi-color-gradient&quot;&gt;Multi-color gradient&lt;/h2&gt;
&lt;p&gt;Ok… Let’s go to what I promised in the title of this article. Once we got the Single-Color version of this gradient, we had more challenging parts already solved. Why? Because now, we need to be able to switch &lt;strong&gt;HUE&lt;/strong&gt; and &lt;strong&gt;SATURATION&lt;/strong&gt; when we need it.&lt;/p&gt;

&lt;p&gt;So let’s say that the products in said matrix belong to one of two categories. Either they have priority and should be sold, or they don’t have priority. That’s something that you can see in this image in column &lt;strong&gt;[FocusCategory]&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/priceListDetails.png&quot; alt=&quot;Pricelist details&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Pricelist details&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I want to use a different base color depending on the product category. For example, the priority category will be green, and the non-priority category will be blue. Since we have the algorithm ready, it’s just a tiny adjustment to solve this condition:&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;Multi-Color&amp;nbsp;Gradient&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedValue&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;priceList&apos;[Id]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedCategory&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDVALUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;pricelist&apos;[FocusCategory]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_inputTable&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATETABLE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;DISTINCT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;priceList&apos;[id]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;priceList&apos;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_counter&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;COUNTROWS&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_inputTable&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_rankOfRow&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;MINX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ADDCOLUMNS&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_inputTable&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;@rank&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RANKX&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ALLSELECTED&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&apos;priceList&apos;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;CALCULATE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;[#&amp;nbsp;Sum&amp;nbsp;Of&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,,&amp;nbsp;DESC&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;[Id]&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedValue&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;[@rank]&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightness&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_initialLightness&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0.33&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_maxLightness&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightnessMover&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;DIVIDE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_maxLightness&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_initialLightness&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_counter&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_initialLightness&lt;/span&gt;&amp;nbsp;+&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightnessMover&lt;/span&gt;&amp;nbsp;*&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_rankOfRow&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#%&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_green&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_hue&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;113&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_saturation&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;48%&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;hsl(&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_hue&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;,&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_saturation&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;,&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightness&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_blue&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_hue&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;194&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_saturation&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;54%&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;hsl(&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_hue&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;,&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_saturation&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;,&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_lightness&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SWITCH&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedCategory&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;Priority&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_green&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedCategory&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;Non-Priority&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_blue&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;BLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Minor adjustments like adding &lt;strong&gt;SELECTEDVALUE()&lt;/strong&gt; to the category column, color definition, and &lt;strong&gt;SWITCH()&lt;/strong&gt; at the end can do wonders because the resulting table will begin to be subject to a gradient defined by us, which, in addition to one color, dynamically switches between other colors. We can add as many of them as we need with a similar modification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/multiColorGradientInRows.png&quot; alt=&quot;Multicolor Gradient in Categories&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Multicolor Gradient in Categories&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Multi-Color Gradient with DAX in Power BI/multiColorGradient.png&quot; alt=&quot;Multicolor Gradient without Categories&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Multicolor Gradient without Categories&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We could even add other conditions and points of view that we would like to include in the calculation.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;A custom gradient can come in handy in many scenarios where you want to add weight to specific results or sets or add another visual dimension to values. When combined with DAX, anything can be achieved.&lt;/p&gt;

&lt;p&gt;I hope this article has shown you that you don’t need to use the HEX color code for everything and that there are more similar codes, such as the HSL above, HSV, and RGB, and it’s up to you which one you use.&lt;/p&gt;

&lt;p&gt;It is certainly worth noting that HSL has its HSLA variant, supporting transparency as part of its last attribute.&lt;/p&gt;

&lt;p&gt;The code I have shown here can be further modified and even more generalized using, for example, Calculation Groups and Field parameters.&lt;/p&gt;

&lt;p&gt;In closing, I’ll leave you with a few questions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What do you think about gradients?&lt;/li&gt;
  &lt;li&gt;Do you use them?&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Sun, 06 Nov 2022 10:00:00 +0100</pubDate>
                <link>http://localhost:4000/multi-color-gradient-dax-power-bi</link>
                <guid isPermaLink="true">http://localhost:4000/multi-color-gradient-dax-power-bi</guid>
                
                <category>dax</category>
                
                <category>calculation_groups</category>
                
                <category>conditional_formatting</category>
                
                <category>color</category>
                
                
            </item>
        
            <item>
                <title></title>
                <description>&lt;p&gt;Many visuals in Power BI support Conditional Formatting through an &lt;strong&gt;FX button&lt;/strong&gt; where I can set it up—for example, using measures, as I showed in the previous article &lt;a href=&quot;/conditional-formatting-based-field-parameters&quot;&gt;Conditional Formatting based on Field Parameters&lt;/a&gt;. So far, we have only talked about the definition of colors. However, conditional formatting isn’t always just about them. There’s a lot more that can be conditionally formatted. For example, the format in which individual columns or measures output is displayed. We can adjust such a format directly in Power BI using the Format String definition or a predefined one. But when it comes to the fact that we need to change it dynamically, we usually have two options. Either reach for the &lt;strong&gt;FORMAT()&lt;/strong&gt; function or reach for Calculation Groups.&lt;/p&gt;

&lt;p&gt;The primary difference between these methods?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FORMAT()&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It must be set for each Measure separately&lt;/li&gt;
  &lt;li&gt;Native support&lt;/li&gt;
  &lt;li&gt;Output is converted into TEXT (data type)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Calculation Groups&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Re-usable at any measure&lt;/li&gt;
  &lt;li&gt;Requires external tool&lt;/li&gt;
  &lt;li&gt;Respects data type of input&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These points can help me a lot when deciding the method I want to use. I will focus on reusability, and for that reason, I will choose &lt;strong&gt;Calculate Groups&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario for mass editing the format string&lt;/strong&gt;
This scenario will sound a little crazy, but it could serve well to explain how to work with it within &lt;strong&gt;CG (Calculation Groups)&lt;/strong&gt;. Imagine the scenario in which you are preparing a report and do not want to define the number of decimal places for each Measure, whether a percentage or a currency.&lt;/p&gt;

&lt;p&gt;We know that the company uses a naming convention when naming measures. The &lt;strong&gt;first two characters&lt;/strong&gt; in the name are reserved for the &lt;strong&gt;data type&lt;/strong&gt; and the number of &lt;strong&gt;decimal places&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first character (specifying data type)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;# - Number&lt;/li&gt;
  &lt;li&gt;\% - Percentage&lt;/li&gt;
  &lt;li&gt;$ - Currency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The second character (specifying the number of decimal places)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;0&lt;/strong&gt; – Output should not have any decimal places&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1&lt;/strong&gt; (up to &lt;strong&gt;9&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples of measure names:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;[#0 Sum of Quantity] – Output should look like a number without any decimal places&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;[$2 Sum of Product costs] – Output should be Currency with two decimal places&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We now have an idea of what we want to achieve. So let’s solve this within Calculation Groups. I will demonstrate it in the mentioned examples.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/baseNumbers.png&quot; alt=&quot;Base numbers in cards&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Base numbers in cards&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Within &lt;a href=&quot;https://tabulareditor.com/&quot;&gt;Tabular Editor 3&lt;/a&gt;, I created a calculation group named &lt;strong&gt;MeasureFormatter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/createdCalulationGroup.png&quot; alt=&quot;Created calculation group&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Created calculation group&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And within it, I created a Calculation Item called &lt;strong&gt;DynamicFormattingByName&lt;/strong&gt;. This is where the “&lt;strong&gt;magic&lt;/strong&gt;” begins. The first thing that appears to me is the option to edit the Expression that this Item would edit. However, we do not need to modify the Expression in this case. So here, I insert the function &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt; so that nothing changes from the point of view of the calculation of the measures themselves.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/expression.png&quot; alt=&quot;Expression&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Expression in item Dynamic Formatting by Name&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And I switch to &lt;strong&gt;Format String Expression&lt;/strong&gt;. This will show me a new canvas for the dax code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/formatStringExpression.png&quot; alt=&quot;Format String Expression&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Switch to Format String Expression&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Calculation Groups allow us to benefit from functions that directly deal with the measures their items target. These features include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SELECTEDMEASURE()&lt;/li&gt;
  &lt;li&gt;SELECTEDMEASURENAME()&lt;/li&gt;
  &lt;li&gt;SELECTEDMEASUREFORMATSTRING()&lt;/li&gt;
  &lt;li&gt;ISSELECTEDMEASURE()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the just mentioned &lt;strong&gt;SELECTEDMEASURENAME()&lt;/strong&gt; can return us a name from which we can extract that prefix:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/firstPartOfCalculation.png&quot; alt=&quot;First part of Calculation&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;First part of Calculation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once I have the prefixes, I can start editing the Format String. &lt;strong&gt;SWITCH()&lt;/strong&gt; can help me with that, where I can say that if “&lt;em&gt;_TypePrefix&lt;/em&gt;” is equal to the value “#”, then the calculation is kept differently than for “$” or “\%”. However, deciding how the formats should look for our purposes is still good. Because for example, the Currency is sometimes displayed with the currency symbol before the number and sometimes after. I will choose the character’s placement after the number for this demonstration. So I will have two format directions. One when I have a pure number (“#”) and one when I have to place the appropriate character after the number ({“\%”, “$”}). If someone doesn’t follow this syntax, I’ll return the default string format that the Measure has preset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/updateOfCalculation.png&quot; alt=&quot;Update of calculation&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Update of calculation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the code above, I’m ignoring decimal places yet. The time for those is coming right now. But again, a small warning is helpful. The &lt;strong&gt;LEFT()&lt;/strong&gt; and &lt;strong&gt;RIGHT()&lt;/strong&gt; functions work with texts. Therefore, I have to consider that our number is also text and will need to be converted to a number format. The most straightforward conversion now will be in the form of adding an &lt;strong&gt;INT()&lt;/strong&gt; function within the “&lt;em&gt;_DecimalPrefix&lt;/em&gt;” variable, which will wrap up the original &lt;strong&gt;RIGHT()&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/intUpdate.png&quot; alt=&quot;INT Update&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;INT() Update&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now it’s just a game with strings that we want to return. We can also use the &lt;strong&gt;REPT()&lt;/strong&gt; function, which creates the specified text string as often as we say. This is very handy when we want to care about decimal places.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;DynamicFormattingByName&amp;nbsp;(CG&amp;nbsp;Format&amp;nbsp;String&amp;nbsp;Expression)&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedMeasureName&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURENAME&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Comment&quot; style=&quot;color:#39a03b&quot;&gt;//&amp;nbsp;#0&amp;nbsp;Sum&amp;nbsp;of&amp;nbsp;Quantity&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prefix&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedMeasureName&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;2&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Comment&quot; style=&quot;color:#39a03b&quot;&gt;//&amp;nbsp;#0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prefix&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Comment&quot; style=&quot;color:#39a03b&quot;&gt;//&amp;nbsp;#&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prefix&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Comment&quot; style=&quot;color:#39a03b&quot;&gt;//&amp;nbsp;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_typeDeclaration&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SWITCH&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;||&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISBLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#.&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;REPT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;0&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IN&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;%&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;$&quot;&lt;/span&gt;&amp;nbsp;},&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;||&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISBLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#.&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;REPT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;0&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_typeDeclaration&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Applied this Item, for example, using the &lt;strong&gt;Filter Pane&lt;/strong&gt; or within the &lt;strong&gt;Slicer&lt;/strong&gt;, it modifies the original measures, and we can immediately see that the output is already conditionally formatted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/baseNumbersFormatted.png&quot; alt=&quot;Base numbers formatted&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Base numbers formatted&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It would still like to add a thousand separators. You may need many of them, but they can be easily added to the Item.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;DynamicFormattingByName&amp;nbsp;(CG&amp;nbsp;Format&amp;nbsp;String&amp;nbsp;Expression)&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedMeasureName&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURENAME&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prefix&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_selectedMeasureName&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;2&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Comment&quot; style=&quot;color:#39a03b&quot;&gt;//&amp;nbsp;#0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prefix&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Comment&quot; style=&quot;color:#39a03b&quot;&gt;//&amp;nbsp;#&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_prefix&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;1&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Comment&quot; style=&quot;color:#39a03b&quot;&gt;//&amp;nbsp;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_typeDeclaration&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SWITCH&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;||&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISBLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#,,,,,,,#&quot;&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#,,,,,,,#.&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;REPT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;0&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IN&lt;/span&gt;&amp;nbsp;{&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;%&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;$&quot;&lt;/span&gt;&amp;nbsp;},&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;||&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISBLANK&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#,,,,,,,#&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#,,,,,,,#.&quot;&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;REPT&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;0&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_DecimalPrefix&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_TypePrefix&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_typeDeclaration&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/fullyFormattedNumbers.png&quot; alt=&quot;Formatting update&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Formatting update&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Great! We have completed the first scenario. So, we have confirmed that this form of conditional formatting is possible within CG.&lt;/p&gt;

&lt;h2 id=&quot;scenario-for-data-labels&quot;&gt;Scenario for data labels&lt;/h2&gt;
&lt;p&gt;Data labels have recently started to support conditional formatting for the &lt;strong&gt;color of their text&lt;/strong&gt;. But that is not the only part that can be &lt;strong&gt;conditionally edited&lt;/strong&gt;. For example, calculated Groups have been able to edit them for quite some time on quite a different level. From that comes the scenario where you only need to see data labels where some condition is met. Our following scenario is based on this.&lt;/p&gt;

&lt;p&gt;The trader regularly looks at the number of his sales for individual months to know when he has not significantly deviated negatively from the &lt;strong&gt;overall average&lt;/strong&gt; and whether the current month has already exceeded this breakpoint. For him, a deviation from the overall average is problematic if it is deviated by more than &lt;strong&gt;5%&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;His chart today that he uses for this analytics looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/chartInit.png&quot; alt=&quot;Chart at the begging&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Chart at the begging&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is easy to find the columns below the deviation in such few values. But it could go even faster if we included CG and conditional formatting in the game.
We can start here from different sides, either from the side of colors or from the side of data labels. &lt;strong&gt;So I’ll stick with labels for a while.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In that scenario, I want to ensure that the behavior I set for the data labels will only apply to the Measure used for Monthly Sales or the previously mentioned Measure named &lt;em&gt;[#0 Sum of Quantity]&lt;/em&gt;. Therefore, I will create a new CG called &lt;strong&gt;AnalyticalFromatterCG&lt;/strong&gt;, an item called &lt;strong&gt;UnderDeviation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;From the point of view of Expression, for the time being, I will always return the executed Measure using the already known &lt;strong&gt;SELECTEDMEASURE()&lt;/strong&gt; function. You may wonder why I don’t make the results disappear within the &lt;strong&gt;Expression&lt;/strong&gt; or let them be equal to 0. It would be an option, but it would be highly misleading because the user would only see the columns below the deviation in the graph. However, I return the columns and just let the data labels disappear. &lt;strong&gt;Format String Expression&lt;/strong&gt; will serve me for this again.&lt;/p&gt;

&lt;p&gt;But this time with an expression that could look like this, for example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/wrongBlankChar.png&quot; alt=&quot;Wrong Blank Char&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Wrong Blank Char&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ISSELECTEDMEASURE&lt;/strong&gt;({&lt;em&gt;measure1,measure2,…&lt;/em&gt;}) is a function that returns &lt;strong&gt;TRUE()&lt;/strong&gt; if any of the measures defined within the internal attribute is the one the calculation is currently directed against. As almost everyone would have tried, I put empty quotes if I didn’t want to return the format string. &lt;em&gt;(Same as in the picture)&lt;/em&gt; But this is just for demonstration purposes. Empty quotes are not supported and &lt;strong&gt;are overwritten by the original Format String&lt;/strong&gt;. So the output looks the same as at the beginning, even if CG is applied to the graph.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/nothingChanged.png&quot; alt=&quot;Nothing changed&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Nothing changed&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A supported character must replace empty quotes. For example, &lt;strong&gt;UNICHAR(8203)&lt;/strong&gt; or from the character map, this character:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/characterMap.png&quot; alt=&quot;Character map&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Character map&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, it would be difficult for me to show you in the code because its width is basically 0, and thus it &lt;strong&gt;is not visible&lt;/strong&gt;. So I will use notation with unichar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/expressionWithRightUnichar.png&quot; alt=&quot;Updated expression&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Updated expression&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;Format&amp;nbsp;String&amp;nbsp;Expression&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISSELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;[#0&amp;nbsp;Sum&amp;nbsp;of&amp;nbsp;Quantity]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_deviation&lt;/span&gt;&amp;nbsp;=&amp;nbsp;[#&amp;nbsp;Average&amp;nbsp;of&amp;nbsp;Quantity&amp;nbsp;by&amp;nbsp;Months&amp;nbsp;-&amp;nbsp;Deviation]&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_outputOfMeasure&lt;/span&gt;&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_outputOfMeasure&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_deviation&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;UNICHAR&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Number&quot; style=&quot;color:#EE7F18&quot;&gt;8203&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASUREFORMATSTRING&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Data labels are now modified as needed, and it works precisely!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/modifiedChart.png&quot; alt=&quot;Modified chart&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Modified chart&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can already see that the output works well, but what if we wanted to add more colors to the whole thing to highlight it and improve orientation? Of course, we could solve it in another CG, but why run more of them about one graph if it is unnecessary?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Of course, the colors could be solved without CG just by using Measure, but for the sake of demonstration, I’m staying in CG.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, we must note that we have modified the &lt;strong&gt;Format String&lt;/strong&gt; up to this point. This is because it can handle quite a lot, and its output does not directly change the behavior of the graph as such. But now, we will need to change the &lt;strong&gt;Expression&lt;/strong&gt;, which directly impacts the individual parts of the graph, such as columns or lines.&lt;/p&gt;

&lt;p&gt;For that reason, it is not a good idea to manipulate the output measures directly but to use some substitute that will not bother you by overwriting it. Everyone gives such a measure a different name, and sometimes you can find more of them in the model when you need their slightly different connections each time. I use a simple measure from the name [cgColors] and an expression that equals “#000000 “. There is a simple reason why I use a measure whose value is “#000000”. Power BI does not allow you to insert any measure in conditional formatting that does not meet the color conditions. That’s why I insert any color that I will subsequently overwrite.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;cgColors&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#000000&quot;&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Chart after inserting [cgColors] into conditional formatting within columns.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/colorFormatingByCG.png&quot; alt=&quot;Color formatted by Calculation Group&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Color formatted by Calculation Group&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now it’s time to return to &lt;strong&gt;AnalyticalFormatterCG&lt;/strong&gt; and its UnderDeviation and &lt;strong&gt;Expression&lt;/strong&gt;. Within this, you can prepare a very similar construct as we prepared in &lt;strong&gt;Format String Expression&lt;/strong&gt;, but this time with the fact that we override Measure &lt;em&gt;[cgColors]&lt;/em&gt; and firmly define which two measures make our decisions.&lt;/p&gt;

&lt;div class=&quot;codebox&quot;&gt;Expression&amp;nbsp;=&lt;br /&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;ISSELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;[cgColors]&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_deviation&lt;/span&gt;&amp;nbsp;=&amp;nbsp;[#&amp;nbsp;Average&amp;nbsp;of&amp;nbsp;Quantity&amp;nbsp;by&amp;nbsp;Months&amp;nbsp;-&amp;nbsp;Deviation]&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;VAR&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_outputOfMeasure&lt;/span&gt;&amp;nbsp;=&amp;nbsp;[#0&amp;nbsp;Sum&amp;nbsp;of&amp;nbsp;Quantity]&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;RETURN&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;indent8&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_outputOfMeasure&lt;/span&gt;&amp;nbsp;&amp;lt;&amp;nbsp;&lt;span class=&quot;Variable&quot; style=&quot;color:#49b0af&quot;&gt;_deviation&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#FF5F57&quot;&lt;/span&gt;,&amp;nbsp;&lt;span class=&quot;StringLiteral&quot; style=&quot;color:#D93124&quot;&gt;&quot;#F5F5F5&quot;&lt;/span&gt;&amp;nbsp;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;,&lt;br /&gt;&lt;span class=&quot;indent4&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;Keyword&quot; style=&quot;color:#035aca&quot;&gt;SELECTEDMEASURE&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;&amp;nbsp;(&lt;/span&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Parenthesis&quot; style=&quot;color:#808080&quot;&gt;)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can prepare a very similar construct as we prepared in Format String Expression, but this time with the fact that we override MeasureMeasure &lt;em&gt;[cgColors]&lt;/em&gt; and firmly define which two measures make our decisions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/dynamicColors.png&quot; alt=&quot;Dynamic Colors by Calculation Group&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Dynamic Colors by Calculation Group&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If I add &lt;em&gt;[cgColors]&lt;/em&gt; as conditional formatting for data labels, I get a complete chart controlled by CG. So if I prepared other items that would focus on other issues, such as the &lt;strong&gt;highest/lowest&lt;/strong&gt; value and the like, I could prepare a simple switch for the user to change the examined planes for the chart.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Conditional Formatting with Calculation Groups/dataLabelsDynamicalyFormatted.png&quot; alt=&quot;Data labels dynamicaly formatted&quot; loading=&quot;lazy&quot; /&gt;
&lt;em&gt;Data labels dynamicaly formatted&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And that is one of the many potent qualities that CGs have.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Calculation Groups are one of the most fantastic objects within the entire Power BI complex.&lt;/strong&gt; They can be used in countless ways to facilitate development with them. At the same time, they can also be used for something like conditional formatting and thus achieve very dynamic and flexible reports.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Suppose you are interested in more detail about them. In that case, I recommend you check out &lt;a href=&quot;https://www.linkedin.com/in/bernatagullo/&quot;&gt;Bernat Agulló Roselló&lt;/a&gt; ([BLOG&lt;/td&gt;
      &lt;td&gt;Esbrina (esbrina-ba.com)](https://www.esbrina-ba.com/blog)), who has fallen completely under their spell and is truly an expert on their scripting and capabilities.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Or to one of my previous articles about the possibilities of Field Parameters in cooperation with Calculation Groups. &lt;a href=&quot;/field-parameters-cooperation-calculation-groups&quot;&gt;Field parameters in cooperation with Calculation groups&lt;/a&gt;&lt;/p&gt;
</description>
                <pubDate>Fri, 30 Sep 2022 11:00:00 +0200</pubDate>
                <link>http://localhost:4000/conditional-formatting-calculation-groups</link>
                <guid isPermaLink="true">http://localhost:4000/conditional-formatting-calculation-groups</guid>
                
                <category>dax</category>
                
                <category>calculation_groups</category>
                
                <category>format_string</category>
                
                <category>conditional_formatting</category>
                
                
            </item>
        
    </channel>
</rss>